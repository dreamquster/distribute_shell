// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: containermanagement_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "containermanagement_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hadoop {
namespace yarn {

namespace {

const ::google::protobuf::ServiceDescriptor* ContainerManagementProtocolService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_containermanagement_5fprotocol_2eproto() {
  protobuf_AddDesc_containermanagement_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "containermanagement_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ContainerManagementProtocolService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_containermanagement_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_containermanagement_5fprotocol_2eproto() {
}

void protobuf_AddDesc_containermanagement_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hadoop::yarn::protobuf_AddDesc_yarn_5fservice_5fprotos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"containermanagement_protocol.proto\022\013ha"
    "doop.yarn\032\031yarn_service_protos.proto2\350\002\n"
    "\"ContainerManagementProtocolService\022f\n\017s"
    "tartContainers\022(.hadoop.yarn.StartContai"
    "nersRequestProto\032).hadoop.yarn.StartCont"
    "ainersResponseProto\022c\n\016stopContainers\022\'."
    "hadoop.yarn.StopContainersRequestProto\032("
    ".hadoop.yarn.StopContainersResponseProto"
    "\022u\n\024getContainerStatuses\022-.hadoop.yarn.G"
    "etContainerStatusesRequestProto\032..hadoop"
    ".yarn.GetContainerStatusesResponseProtoB"
    "G\n\034org.apache.hadoop.yarn.protoB\033Contain"
    "erManagementProtocol\200\001\001\210\001\001\220\001\001\240\001\001", 512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "containermanagement_protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_containermanagement_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_containermanagement_5fprotocol_2eproto {
  StaticDescriptorInitializer_containermanagement_5fprotocol_2eproto() {
    protobuf_AddDesc_containermanagement_5fprotocol_2eproto();
  }
} static_descriptor_initializer_containermanagement_5fprotocol_2eproto_;

// ===================================================================

ContainerManagementProtocolService::~ContainerManagementProtocolService() {}

const ::google::protobuf::ServiceDescriptor* ContainerManagementProtocolService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerManagementProtocolService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ContainerManagementProtocolService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerManagementProtocolService_descriptor_;
}

void ContainerManagementProtocolService::startContainers(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::StartContainersRequestProto*,
                         ::hadoop::yarn::StartContainersResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method startContainers() not implemented.");
  done->Run();
}

void ContainerManagementProtocolService::stopContainers(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::StopContainersRequestProto*,
                         ::hadoop::yarn::StopContainersResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method stopContainers() not implemented.");
  done->Run();
}

void ContainerManagementProtocolService::getContainerStatuses(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::GetContainerStatusesRequestProto*,
                         ::hadoop::yarn::GetContainerStatusesResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getContainerStatuses() not implemented.");
  done->Run();
}

void ContainerManagementProtocolService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ContainerManagementProtocolService_descriptor_);
  switch(method->index()) {
    case 0:
      startContainers(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::StartContainersRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::StartContainersResponseProto*>(response),
             done);
      break;
    case 1:
      stopContainers(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::StopContainersRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::StopContainersResponseProto*>(response),
             done);
      break;
    case 2:
      getContainerStatuses(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::GetContainerStatusesRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::GetContainerStatusesResponseProto*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ContainerManagementProtocolService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hadoop::yarn::StartContainersRequestProto::default_instance();
    case 1:
      return ::hadoop::yarn::StopContainersRequestProto::default_instance();
    case 2:
      return ::hadoop::yarn::GetContainerStatusesRequestProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ContainerManagementProtocolService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hadoop::yarn::StartContainersResponseProto::default_instance();
    case 1:
      return ::hadoop::yarn::StopContainersResponseProto::default_instance();
    case 2:
      return ::hadoop::yarn::GetContainerStatusesResponseProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ContainerManagementProtocolService_Stub::ContainerManagementProtocolService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ContainerManagementProtocolService_Stub::ContainerManagementProtocolService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ContainerManagementProtocolService_Stub::~ContainerManagementProtocolService_Stub() {
  if (owns_channel_) delete channel_;
}

void ContainerManagementProtocolService_Stub::startContainers(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::StartContainersRequestProto* request,
                              ::hadoop::yarn::StartContainersResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ContainerManagementProtocolService_Stub::stopContainers(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::StopContainersRequestProto* request,
                              ::hadoop::yarn::StopContainersResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ContainerManagementProtocolService_Stub::getContainerStatuses(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::GetContainerStatusesRequestProto* request,
                              ::hadoop::yarn::GetContainerStatusesResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace yarn
}  // namespace hadoop

// @@protoc_insertion_point(global_scope)
