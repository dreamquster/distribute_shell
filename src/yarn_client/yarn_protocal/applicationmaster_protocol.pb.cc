// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: applicationmaster_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "applicationmaster_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hadoop {
namespace yarn {

namespace {

const ::google::protobuf::ServiceDescriptor* ApplicationMasterProtocolService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_applicationmaster_5fprotocol_2eproto() {
  protobuf_AddDesc_applicationmaster_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "applicationmaster_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ApplicationMasterProtocolService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_applicationmaster_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_applicationmaster_5fprotocol_2eproto() {
}

void protobuf_AddDesc_applicationmaster_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hadoop::yarn::protobuf_AddDesc_yarn_5fservice_5fprotos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n applicationmaster_protocol.proto\022\013hado"
    "op.yarn\032\031yarn_service_protos.proto2\374\002\n A"
    "pplicationMasterProtocolService\022\204\001\n\031regi"
    "sterApplicationMaster\0222.hadoop.yarn.Regi"
    "sterApplicationMasterRequestProto\0323.hado"
    "op.yarn.RegisterApplicationMasterRespons"
    "eProto\022~\n\027finishApplicationMaster\0220.hado"
    "op.yarn.FinishApplicationMasterRequestPr"
    "oto\0321.hadoop.yarn.FinishApplicationMaste"
    "rResponseProto\022Q\n\010allocate\022!.hadoop.yarn"
    ".AllocateRequestProto\032\".hadoop.yarn.Allo"
    "cateResponseProtoBE\n\034org.apache.hadoop.y"
    "arn.protoB\031ApplicationMasterProtocol\200\001\001\210"
    "\001\001\220\001\001\240\001\001", 528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "applicationmaster_protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_applicationmaster_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_applicationmaster_5fprotocol_2eproto {
  StaticDescriptorInitializer_applicationmaster_5fprotocol_2eproto() {
    protobuf_AddDesc_applicationmaster_5fprotocol_2eproto();
  }
} static_descriptor_initializer_applicationmaster_5fprotocol_2eproto_;

// ===================================================================

ApplicationMasterProtocolService::~ApplicationMasterProtocolService() {}

const ::google::protobuf::ServiceDescriptor* ApplicationMasterProtocolService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationMasterProtocolService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ApplicationMasterProtocolService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationMasterProtocolService_descriptor_;
}

void ApplicationMasterProtocolService::registerApplicationMaster(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::RegisterApplicationMasterRequestProto*,
                         ::hadoop::yarn::RegisterApplicationMasterResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method registerApplicationMaster() not implemented.");
  done->Run();
}

void ApplicationMasterProtocolService::finishApplicationMaster(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::FinishApplicationMasterRequestProto*,
                         ::hadoop::yarn::FinishApplicationMasterResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method finishApplicationMaster() not implemented.");
  done->Run();
}

void ApplicationMasterProtocolService::allocate(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::AllocateRequestProto*,
                         ::hadoop::yarn::AllocateResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method allocate() not implemented.");
  done->Run();
}

void ApplicationMasterProtocolService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ApplicationMasterProtocolService_descriptor_);
  switch(method->index()) {
    case 0:
      registerApplicationMaster(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::RegisterApplicationMasterRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::RegisterApplicationMasterResponseProto*>(response),
             done);
      break;
    case 1:
      finishApplicationMaster(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::FinishApplicationMasterRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::FinishApplicationMasterResponseProto*>(response),
             done);
      break;
    case 2:
      allocate(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::AllocateRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::AllocateResponseProto*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ApplicationMasterProtocolService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hadoop::yarn::RegisterApplicationMasterRequestProto::default_instance();
    case 1:
      return ::hadoop::yarn::FinishApplicationMasterRequestProto::default_instance();
    case 2:
      return ::hadoop::yarn::AllocateRequestProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ApplicationMasterProtocolService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hadoop::yarn::RegisterApplicationMasterResponseProto::default_instance();
    case 1:
      return ::hadoop::yarn::FinishApplicationMasterResponseProto::default_instance();
    case 2:
      return ::hadoop::yarn::AllocateResponseProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ApplicationMasterProtocolService_Stub::ApplicationMasterProtocolService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ApplicationMasterProtocolService_Stub::ApplicationMasterProtocolService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ApplicationMasterProtocolService_Stub::~ApplicationMasterProtocolService_Stub() {
  if (owns_channel_) delete channel_;
}

void ApplicationMasterProtocolService_Stub::registerApplicationMaster(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::RegisterApplicationMasterRequestProto* request,
                              ::hadoop::yarn::RegisterApplicationMasterResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ApplicationMasterProtocolService_Stub::finishApplicationMaster(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::FinishApplicationMasterRequestProto* request,
                              ::hadoop::yarn::FinishApplicationMasterResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ApplicationMasterProtocolService_Stub::allocate(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::AllocateRequestProto* request,
                              ::hadoop::yarn::AllocateResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace yarn
}  // namespace hadoop

// @@protoc_insertion_point(global_scope)
