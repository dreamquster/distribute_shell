// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yarn_protos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yarn_protos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hadoop {
namespace yarn {

namespace {

const ::google::protobuf::Descriptor* SerializedExceptionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedExceptionProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationIdProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationIdProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationAttemptIdProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationAttemptIdProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerIdProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerIdProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriorityProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriorityProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* URLProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  URLProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalResourceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalResourceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationResourceUsageReportProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationResourceUsageReportProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationReportProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationReportProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeIdProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeIdProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeReportProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeReportProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreemptionMessageProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreemptionMessageProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrictPreemptionContractProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrictPreemptionContractProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreemptionContractProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreemptionContractProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreemptionContainerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreemptionContainerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreemptionResourceRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreemptionResourceRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceBlacklistRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceBlacklistRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationSubmissionContextProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationSubmissionContextProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationACLMapProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationACLMapProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* YarnClusterMetricsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YarnClusterMetricsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueueInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueueInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueueUserACLInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueueUserACLInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerLaunchContextProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerLaunchContextProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerStatusProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerStatusProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringLocalResourceMapProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringLocalResourceMapProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringStringMapProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringStringMapProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringBytesMapProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringBytesMapProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerStateProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YarnApplicationStateProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FinalApplicationStatusProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalResourceVisibilityProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalResourceTypeProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeStateProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AMCommandProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplicationAccessTypeProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QueueStateProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QueueACLProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerExitStatusProto_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_yarn_5fprotos_2eproto() {
  protobuf_AddDesc_yarn_5fprotos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "yarn_protos.proto");
  GOOGLE_CHECK(file != NULL);
  SerializedExceptionProto_descriptor_ = file->message_type(0);
  static const int SerializedExceptionProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedExceptionProto, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedExceptionProto, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedExceptionProto, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedExceptionProto, cause_),
  };
  SerializedExceptionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SerializedExceptionProto_descriptor_,
      SerializedExceptionProto::default_instance_,
      SerializedExceptionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedExceptionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedExceptionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SerializedExceptionProto));
  ApplicationIdProto_descriptor_ = file->message_type(1);
  static const int ApplicationIdProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationIdProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationIdProto, cluster_timestamp_),
  };
  ApplicationIdProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationIdProto_descriptor_,
      ApplicationIdProto::default_instance_,
      ApplicationIdProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationIdProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationIdProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationIdProto));
  ApplicationAttemptIdProto_descriptor_ = file->message_type(2);
  static const int ApplicationAttemptIdProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationAttemptIdProto, application_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationAttemptIdProto, attemptid_),
  };
  ApplicationAttemptIdProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationAttemptIdProto_descriptor_,
      ApplicationAttemptIdProto::default_instance_,
      ApplicationAttemptIdProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationAttemptIdProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationAttemptIdProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationAttemptIdProto));
  ContainerIdProto_descriptor_ = file->message_type(3);
  static const int ContainerIdProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerIdProto, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerIdProto, app_attempt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerIdProto, id_),
  };
  ContainerIdProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerIdProto_descriptor_,
      ContainerIdProto::default_instance_,
      ContainerIdProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerIdProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerIdProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerIdProto));
  ResourceProto_descriptor_ = file->message_type(4);
  static const int ResourceProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceProto, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceProto, virtual_cores_),
  };
  ResourceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceProto_descriptor_,
      ResourceProto::default_instance_,
      ResourceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceProto));
  PriorityProto_descriptor_ = file->message_type(5);
  static const int PriorityProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorityProto, priority_),
  };
  PriorityProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriorityProto_descriptor_,
      PriorityProto::default_instance_,
      PriorityProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorityProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriorityProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriorityProto));
  ContainerProto_descriptor_ = file->message_type(6);
  static const int ContainerProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, node_http_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, container_token_),
  };
  ContainerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerProto_descriptor_,
      ContainerProto::default_instance_,
      ContainerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerProto));
  URLProto_descriptor_ = file->message_type(7);
  static const int URLProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLProto, scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLProto, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLProto, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLProto, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLProto, userinfo_),
  };
  URLProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      URLProto_descriptor_,
      URLProto::default_instance_,
      URLProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(URLProto));
  LocalResourceProto_descriptor_ = file->message_type(8);
  static const int LocalResourceProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalResourceProto, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalResourceProto, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalResourceProto, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalResourceProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalResourceProto, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalResourceProto, pattern_),
  };
  LocalResourceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalResourceProto_descriptor_,
      LocalResourceProto::default_instance_,
      LocalResourceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalResourceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalResourceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalResourceProto));
  ApplicationResourceUsageReportProto_descriptor_ = file->message_type(9);
  static const int ApplicationResourceUsageReportProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationResourceUsageReportProto, num_used_containers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationResourceUsageReportProto, num_reserved_containers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationResourceUsageReportProto, used_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationResourceUsageReportProto, reserved_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationResourceUsageReportProto, needed_resources_),
  };
  ApplicationResourceUsageReportProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationResourceUsageReportProto_descriptor_,
      ApplicationResourceUsageReportProto::default_instance_,
      ApplicationResourceUsageReportProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationResourceUsageReportProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationResourceUsageReportProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationResourceUsageReportProto));
  ApplicationReportProto_descriptor_ = file->message_type(10);
  static const int ApplicationReportProto_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, applicationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, rpc_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, client_to_am_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, yarn_application_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, trackingurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, diagnostics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, final_application_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, app_resource_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, originaltrackingurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, currentapplicationattemptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, applicationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, am_rm_token_),
  };
  ApplicationReportProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationReportProto_descriptor_,
      ApplicationReportProto::default_instance_,
      ApplicationReportProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationReportProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationReportProto));
  NodeIdProto_descriptor_ = file->message_type(11);
  static const int NodeIdProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeIdProto, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeIdProto, port_),
  };
  NodeIdProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeIdProto_descriptor_,
      NodeIdProto::default_instance_,
      NodeIdProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeIdProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeIdProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeIdProto));
  NodeReportProto_descriptor_ = file->message_type(12);
  static const int NodeReportProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, httpaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, rackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, numcontainers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, node_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, health_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, last_health_report_time_),
  };
  NodeReportProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeReportProto_descriptor_,
      NodeReportProto::default_instance_,
      NodeReportProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReportProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeReportProto));
  ResourceRequestProto_descriptor_ = file->message_type(13);
  static const int ResourceRequestProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequestProto, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequestProto, resource_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequestProto, capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequestProto, num_containers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequestProto, relax_locality_),
  };
  ResourceRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceRequestProto_descriptor_,
      ResourceRequestProto::default_instance_,
      ResourceRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceRequestProto));
  PreemptionMessageProto_descriptor_ = file->message_type(14);
  static const int PreemptionMessageProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionMessageProto, strictcontract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionMessageProto, contract_),
  };
  PreemptionMessageProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreemptionMessageProto_descriptor_,
      PreemptionMessageProto::default_instance_,
      PreemptionMessageProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionMessageProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionMessageProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreemptionMessageProto));
  StrictPreemptionContractProto_descriptor_ = file->message_type(15);
  static const int StrictPreemptionContractProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrictPreemptionContractProto, container_),
  };
  StrictPreemptionContractProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrictPreemptionContractProto_descriptor_,
      StrictPreemptionContractProto::default_instance_,
      StrictPreemptionContractProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrictPreemptionContractProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrictPreemptionContractProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrictPreemptionContractProto));
  PreemptionContractProto_descriptor_ = file->message_type(16);
  static const int PreemptionContractProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionContractProto, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionContractProto, container_),
  };
  PreemptionContractProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreemptionContractProto_descriptor_,
      PreemptionContractProto::default_instance_,
      PreemptionContractProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionContractProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionContractProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreemptionContractProto));
  PreemptionContainerProto_descriptor_ = file->message_type(17);
  static const int PreemptionContainerProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionContainerProto, id_),
  };
  PreemptionContainerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreemptionContainerProto_descriptor_,
      PreemptionContainerProto::default_instance_,
      PreemptionContainerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionContainerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionContainerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreemptionContainerProto));
  PreemptionResourceRequestProto_descriptor_ = file->message_type(18);
  static const int PreemptionResourceRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionResourceRequestProto, resource_),
  };
  PreemptionResourceRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreemptionResourceRequestProto_descriptor_,
      PreemptionResourceRequestProto::default_instance_,
      PreemptionResourceRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionResourceRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreemptionResourceRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreemptionResourceRequestProto));
  ResourceBlacklistRequestProto_descriptor_ = file->message_type(19);
  static const int ResourceBlacklistRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBlacklistRequestProto, blacklist_additions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBlacklistRequestProto, blacklist_removals_),
  };
  ResourceBlacklistRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceBlacklistRequestProto_descriptor_,
      ResourceBlacklistRequestProto::default_instance_,
      ResourceBlacklistRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBlacklistRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBlacklistRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceBlacklistRequestProto));
  ApplicationSubmissionContextProto_descriptor_ = file->message_type(20);
  static const int ApplicationSubmissionContextProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, application_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, application_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, am_container_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, cancel_tokens_when_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, unmanaged_am_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, maxappattempts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, applicationtype_),
  };
  ApplicationSubmissionContextProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationSubmissionContextProto_descriptor_,
      ApplicationSubmissionContextProto::default_instance_,
      ApplicationSubmissionContextProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSubmissionContextProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationSubmissionContextProto));
  ApplicationACLMapProto_descriptor_ = file->message_type(21);
  static const int ApplicationACLMapProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationACLMapProto, accesstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationACLMapProto, acl_),
  };
  ApplicationACLMapProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationACLMapProto_descriptor_,
      ApplicationACLMapProto::default_instance_,
      ApplicationACLMapProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationACLMapProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationACLMapProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationACLMapProto));
  YarnClusterMetricsProto_descriptor_ = file->message_type(22);
  static const int YarnClusterMetricsProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YarnClusterMetricsProto, num_node_managers_),
  };
  YarnClusterMetricsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YarnClusterMetricsProto_descriptor_,
      YarnClusterMetricsProto::default_instance_,
      YarnClusterMetricsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YarnClusterMetricsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YarnClusterMetricsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YarnClusterMetricsProto));
  QueueInfoProto_descriptor_ = file->message_type(23);
  static const int QueueInfoProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, queuename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, maximumcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, currentcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, childqueues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, applications_),
  };
  QueueInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueueInfoProto_descriptor_,
      QueueInfoProto::default_instance_,
      QueueInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueueInfoProto));
  QueueUserACLInfoProto_descriptor_ = file->message_type(24);
  static const int QueueUserACLInfoProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueUserACLInfoProto, queuename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueUserACLInfoProto, useracls_),
  };
  QueueUserACLInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueueUserACLInfoProto_descriptor_,
      QueueUserACLInfoProto::default_instance_,
      QueueUserACLInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueUserACLInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueUserACLInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueueUserACLInfoProto));
  ContainerLaunchContextProto_descriptor_ = file->message_type(25);
  static const int ContainerLaunchContextProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLaunchContextProto, localresources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLaunchContextProto, tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLaunchContextProto, service_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLaunchContextProto, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLaunchContextProto, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLaunchContextProto, application_acls_),
  };
  ContainerLaunchContextProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerLaunchContextProto_descriptor_,
      ContainerLaunchContextProto::default_instance_,
      ContainerLaunchContextProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLaunchContextProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLaunchContextProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerLaunchContextProto));
  ContainerStatusProto_descriptor_ = file->message_type(26);
  static const int ContainerStatusProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatusProto, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatusProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatusProto, diagnostics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatusProto, exit_status_),
  };
  ContainerStatusProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerStatusProto_descriptor_,
      ContainerStatusProto::default_instance_,
      ContainerStatusProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatusProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatusProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerStatusProto));
  StringLocalResourceMapProto_descriptor_ = file->message_type(27);
  static const int StringLocalResourceMapProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringLocalResourceMapProto, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringLocalResourceMapProto, value_),
  };
  StringLocalResourceMapProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringLocalResourceMapProto_descriptor_,
      StringLocalResourceMapProto::default_instance_,
      StringLocalResourceMapProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringLocalResourceMapProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringLocalResourceMapProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringLocalResourceMapProto));
  StringStringMapProto_descriptor_ = file->message_type(28);
  static const int StringStringMapProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStringMapProto, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStringMapProto, value_),
  };
  StringStringMapProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringStringMapProto_descriptor_,
      StringStringMapProto::default_instance_,
      StringStringMapProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStringMapProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStringMapProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringStringMapProto));
  StringBytesMapProto_descriptor_ = file->message_type(29);
  static const int StringBytesMapProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringBytesMapProto, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringBytesMapProto, value_),
  };
  StringBytesMapProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringBytesMapProto_descriptor_,
      StringBytesMapProto::default_instance_,
      StringBytesMapProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringBytesMapProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringBytesMapProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringBytesMapProto));
  ContainerStateProto_descriptor_ = file->enum_type(0);
  YarnApplicationStateProto_descriptor_ = file->enum_type(1);
  FinalApplicationStatusProto_descriptor_ = file->enum_type(2);
  LocalResourceVisibilityProto_descriptor_ = file->enum_type(3);
  LocalResourceTypeProto_descriptor_ = file->enum_type(4);
  NodeStateProto_descriptor_ = file->enum_type(5);
  AMCommandProto_descriptor_ = file->enum_type(6);
  ApplicationAccessTypeProto_descriptor_ = file->enum_type(7);
  QueueStateProto_descriptor_ = file->enum_type(8);
  QueueACLProto_descriptor_ = file->enum_type(9);
  ContainerExitStatusProto_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_yarn_5fprotos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SerializedExceptionProto_descriptor_, &SerializedExceptionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationIdProto_descriptor_, &ApplicationIdProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationAttemptIdProto_descriptor_, &ApplicationAttemptIdProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerIdProto_descriptor_, &ContainerIdProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceProto_descriptor_, &ResourceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriorityProto_descriptor_, &PriorityProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerProto_descriptor_, &ContainerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    URLProto_descriptor_, &URLProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalResourceProto_descriptor_, &LocalResourceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationResourceUsageReportProto_descriptor_, &ApplicationResourceUsageReportProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationReportProto_descriptor_, &ApplicationReportProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeIdProto_descriptor_, &NodeIdProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeReportProto_descriptor_, &NodeReportProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceRequestProto_descriptor_, &ResourceRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreemptionMessageProto_descriptor_, &PreemptionMessageProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrictPreemptionContractProto_descriptor_, &StrictPreemptionContractProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreemptionContractProto_descriptor_, &PreemptionContractProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreemptionContainerProto_descriptor_, &PreemptionContainerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreemptionResourceRequestProto_descriptor_, &PreemptionResourceRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceBlacklistRequestProto_descriptor_, &ResourceBlacklistRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationSubmissionContextProto_descriptor_, &ApplicationSubmissionContextProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationACLMapProto_descriptor_, &ApplicationACLMapProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YarnClusterMetricsProto_descriptor_, &YarnClusterMetricsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueueInfoProto_descriptor_, &QueueInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueueUserACLInfoProto_descriptor_, &QueueUserACLInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerLaunchContextProto_descriptor_, &ContainerLaunchContextProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerStatusProto_descriptor_, &ContainerStatusProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringLocalResourceMapProto_descriptor_, &StringLocalResourceMapProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringStringMapProto_descriptor_, &StringStringMapProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringBytesMapProto_descriptor_, &StringBytesMapProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_yarn_5fprotos_2eproto() {
  delete SerializedExceptionProto::default_instance_;
  delete SerializedExceptionProto_reflection_;
  delete ApplicationIdProto::default_instance_;
  delete ApplicationIdProto_reflection_;
  delete ApplicationAttemptIdProto::default_instance_;
  delete ApplicationAttemptIdProto_reflection_;
  delete ContainerIdProto::default_instance_;
  delete ContainerIdProto_reflection_;
  delete ResourceProto::default_instance_;
  delete ResourceProto_reflection_;
  delete PriorityProto::default_instance_;
  delete PriorityProto_reflection_;
  delete ContainerProto::default_instance_;
  delete ContainerProto_reflection_;
  delete URLProto::default_instance_;
  delete URLProto_reflection_;
  delete LocalResourceProto::default_instance_;
  delete LocalResourceProto_reflection_;
  delete ApplicationResourceUsageReportProto::default_instance_;
  delete ApplicationResourceUsageReportProto_reflection_;
  delete ApplicationReportProto::default_instance_;
  delete ApplicationReportProto_reflection_;
  delete ApplicationReportProto::_default_diagnostics_;
  delete NodeIdProto::default_instance_;
  delete NodeIdProto_reflection_;
  delete NodeReportProto::default_instance_;
  delete NodeReportProto_reflection_;
  delete ResourceRequestProto::default_instance_;
  delete ResourceRequestProto_reflection_;
  delete PreemptionMessageProto::default_instance_;
  delete PreemptionMessageProto_reflection_;
  delete StrictPreemptionContractProto::default_instance_;
  delete StrictPreemptionContractProto_reflection_;
  delete PreemptionContractProto::default_instance_;
  delete PreemptionContractProto_reflection_;
  delete PreemptionContainerProto::default_instance_;
  delete PreemptionContainerProto_reflection_;
  delete PreemptionResourceRequestProto::default_instance_;
  delete PreemptionResourceRequestProto_reflection_;
  delete ResourceBlacklistRequestProto::default_instance_;
  delete ResourceBlacklistRequestProto_reflection_;
  delete ApplicationSubmissionContextProto::default_instance_;
  delete ApplicationSubmissionContextProto_reflection_;
  delete ApplicationSubmissionContextProto::_default_application_name_;
  delete ApplicationSubmissionContextProto::_default_queue_;
  delete ApplicationSubmissionContextProto::_default_applicationtype_;
  delete ApplicationACLMapProto::default_instance_;
  delete ApplicationACLMapProto_reflection_;
  delete ApplicationACLMapProto::_default_acl_;
  delete YarnClusterMetricsProto::default_instance_;
  delete YarnClusterMetricsProto_reflection_;
  delete QueueInfoProto::default_instance_;
  delete QueueInfoProto_reflection_;
  delete QueueUserACLInfoProto::default_instance_;
  delete QueueUserACLInfoProto_reflection_;
  delete ContainerLaunchContextProto::default_instance_;
  delete ContainerLaunchContextProto_reflection_;
  delete ContainerStatusProto::default_instance_;
  delete ContainerStatusProto_reflection_;
  delete ContainerStatusProto::_default_diagnostics_;
  delete StringLocalResourceMapProto::default_instance_;
  delete StringLocalResourceMapProto_reflection_;
  delete StringStringMapProto::default_instance_;
  delete StringStringMapProto_reflection_;
  delete StringBytesMapProto::default_instance_;
  delete StringBytesMapProto_reflection_;
}

void protobuf_AddDesc_yarn_5fprotos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hadoop::common::protobuf_AddDesc_Security_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021yarn_protos.proto\022\013hadoop.yarn\032\016Securi"
    "ty.proto\"\204\001\n\030SerializedExceptionProto\022\017\n"
    "\007message\030\001 \001(\t\022\r\n\005trace\030\002 \001(\t\022\022\n\nclass_n"
    "ame\030\003 \001(\t\0224\n\005cause\030\004 \001(\0132%.hadoop.yarn.S"
    "erializedExceptionProto\";\n\022ApplicationId"
    "Proto\022\n\n\002id\030\001 \001(\005\022\031\n\021cluster_timestamp\030\002"
    " \001(\003\"g\n\031ApplicationAttemptIdProto\0227\n\016app"
    "lication_id\030\001 \001(\0132\037.hadoop.yarn.Applicat"
    "ionIdProto\022\021\n\tattemptId\030\002 \001(\005\"\217\001\n\020Contai"
    "nerIdProto\022/\n\006app_id\030\001 \001(\0132\037.hadoop.yarn"
    ".ApplicationIdProto\022>\n\016app_attempt_id\030\002 "
    "\001(\0132&.hadoop.yarn.ApplicationAttemptIdPr"
    "oto\022\n\n\002id\030\003 \001(\005\"6\n\rResourceProto\022\016\n\006memo"
    "ry\030\001 \001(\005\022\025\n\rvirtual_cores\030\002 \001(\005\"!\n\rPrior"
    "ityProto\022\020\n\010priority\030\001 \001(\005\"\220\002\n\016Container"
    "Proto\022)\n\002id\030\001 \001(\0132\035.hadoop.yarn.Containe"
    "rIdProto\022(\n\006nodeId\030\002 \001(\0132\030.hadoop.yarn.N"
    "odeIdProto\022\031\n\021node_http_address\030\003 \001(\t\022,\n"
    "\010resource\030\004 \001(\0132\032.hadoop.yarn.ResourcePr"
    "oto\022,\n\010priority\030\005 \001(\0132\032.hadoop.yarn.Prio"
    "rityProto\0222\n\017container_token\030\006 \001(\0132\031.had"
    "oop.common.TokenProto\"V\n\010URLProto\022\016\n\006sch"
    "eme\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\014\n"
    "\004file\030\004 \001(\t\022\020\n\010userInfo\030\005 \001(\t\"\341\001\n\022LocalR"
    "esourceProto\022\'\n\010resource\030\001 \001(\0132\025.hadoop."
    "yarn.URLProto\022\014\n\004size\030\002 \001(\003\022\021\n\ttimestamp"
    "\030\003 \001(\003\0221\n\004type\030\004 \001(\0162#.hadoop.yarn.Local"
    "ResourceTypeProto\022=\n\nvisibility\030\005 \001(\0162)."
    "hadoop.yarn.LocalResourceVisibilityProto"
    "\022\017\n\007pattern\030\006 \001(\t\"\205\002\n#ApplicationResourc"
    "eUsageReportProto\022\033\n\023num_used_containers"
    "\030\001 \001(\005\022\037\n\027num_reserved_containers\030\002 \001(\005\022"
    "2\n\016used_resources\030\003 \001(\0132\032.hadoop.yarn.Re"
    "sourceProto\0226\n\022reserved_resources\030\004 \001(\0132"
    "\032.hadoop.yarn.ResourceProto\0224\n\020needed_re"
    "sources\030\005 \001(\0132\032.hadoop.yarn.ResourceProt"
    "o\"\317\005\n\026ApplicationReportProto\0226\n\rapplicat"
    "ionId\030\001 \001(\0132\037.hadoop.yarn.ApplicationIdP"
    "roto\022\014\n\004user\030\002 \001(\t\022\r\n\005queue\030\003 \001(\t\022\014\n\004nam"
    "e\030\004 \001(\t\022\014\n\004host\030\005 \001(\t\022\020\n\010rpc_port\030\006 \001(\005\022"
    "5\n\022client_to_am_token\030\007 \001(\0132\031.hadoop.com"
    "mon.TokenProto\022F\n\026yarn_application_state"
    "\030\010 \001(\0162&.hadoop.yarn.YarnApplicationStat"
    "eProto\022\023\n\013trackingUrl\030\t \001(\t\022\030\n\013diagnosti"
    "cs\030\n \001(\t:\003N/A\022\021\n\tstartTime\030\013 \001(\003\022\022\n\nfini"
    "shTime\030\014 \001(\003\022J\n\030final_application_status"
    "\030\r \001(\0162(.hadoop.yarn.FinalApplicationSta"
    "tusProto\022L\n\022app_resource_Usage\030\016 \001(\01320.h"
    "adoop.yarn.ApplicationResourceUsageRepor"
    "tProto\022\033\n\023originalTrackingUrl\030\017 \001(\t\022K\n\033c"
    "urrentApplicationAttemptId\030\020 \001(\0132&.hadoo"
    "p.yarn.ApplicationAttemptIdProto\022\020\n\010prog"
    "ress\030\021 \001(\002\022\027\n\017applicationType\030\022 \001(\t\022.\n\013a"
    "m_rm_token\030\023 \001(\0132\031.hadoop.common.TokenPr"
    "oto\")\n\013NodeIdProto\022\014\n\004host\030\001 \001(\t\022\014\n\004port"
    "\030\002 \001(\005\"\274\002\n\017NodeReportProto\022(\n\006nodeId\030\001 \001"
    "(\0132\030.hadoop.yarn.NodeIdProto\022\023\n\013httpAddr"
    "ess\030\002 \001(\t\022\020\n\010rackName\030\003 \001(\t\022(\n\004used\030\004 \001("
    "\0132\032.hadoop.yarn.ResourceProto\022.\n\ncapabil"
    "ity\030\005 \001(\0132\032.hadoop.yarn.ResourceProto\022\025\n"
    "\rnumContainers\030\006 \001(\005\022/\n\nnode_state\030\007 \001(\016"
    "2\033.hadoop.yarn.NodeStateProto\022\025\n\rhealth_"
    "report\030\010 \001(\t\022\037\n\027last_health_report_time\030"
    "\t \001(\003\"\301\001\n\024ResourceRequestProto\022,\n\010priori"
    "ty\030\001 \001(\0132\032.hadoop.yarn.PriorityProto\022\025\n\r"
    "resource_name\030\002 \001(\t\022.\n\ncapability\030\003 \001(\0132"
    "\032.hadoop.yarn.ResourceProto\022\026\n\016num_conta"
    "iners\030\004 \001(\005\022\034\n\016relax_locality\030\005 \001(\010:\004tru"
    "e\"\224\001\n\026PreemptionMessageProto\022B\n\016strictCo"
    "ntract\030\001 \001(\0132*.hadoop.yarn.StrictPreempt"
    "ionContractProto\0226\n\010contract\030\002 \001(\0132$.had"
    "oop.yarn.PreemptionContractProto\"Y\n\035Stri"
    "ctPreemptionContractProto\0228\n\tcontainer\030\001"
    " \003(\0132%.hadoop.yarn.PreemptionContainerPr"
    "oto\"\222\001\n\027PreemptionContractProto\022=\n\010resou"
    "rce\030\001 \003(\0132+.hadoop.yarn.PreemptionResour"
    "ceRequestProto\0228\n\tcontainer\030\002 \003(\0132%.hado"
    "op.yarn.PreemptionContainerProto\"E\n\030Pree"
    "mptionContainerProto\022)\n\002id\030\001 \001(\0132\035.hadoo"
    "p.yarn.ContainerIdProto\"U\n\036PreemptionRes"
    "ourceRequestProto\0223\n\010resource\030\001 \001(\0132!.ha"
    "doop.yarn.ResourceRequestProto\"X\n\035Resour"
    "ceBlacklistRequestProto\022\033\n\023blacklist_add"
    "itions\030\001 \003(\t\022\032\n\022blacklist_removals\030\002 \003(\t"
    "\"\266\003\n!ApplicationSubmissionContextProto\0227"
    "\n\016application_id\030\001 \001(\0132\037.hadoop.yarn.App"
    "licationIdProto\022\035\n\020application_name\030\002 \001("
    "\t:\003N/A\022\026\n\005queue\030\003 \001(\t:\007default\022,\n\010priori"
    "ty\030\004 \001(\0132\032.hadoop.yarn.PriorityProto\022C\n\021"
    "am_container_spec\030\005 \001(\0132(.hadoop.yarn.Co"
    "ntainerLaunchContextProto\022)\n\033cancel_toke"
    "ns_when_complete\030\006 \001(\010:\004true\022\033\n\014unmanage"
    "d_am\030\007 \001(\010:\005false\022\031\n\016maxAppAttempts\030\010 \001("
    "\005:\0010\022,\n\010resource\030\t \001(\0132\032.hadoop.yarn.Res"
    "ourceProto\022\035\n\017applicationType\030\n \001(\t:\004YAR"
    "N\"e\n\026ApplicationACLMapProto\022;\n\naccessTyp"
    "e\030\001 \001(\0162\'.hadoop.yarn.ApplicationAccessT"
    "ypeProto\022\016\n\003acl\030\002 \001(\t:\001 \"4\n\027YarnClusterM"
    "etricsProto\022\031\n\021num_node_managers\030\001 \001(\005\"\201"
    "\002\n\016QueueInfoProto\022\021\n\tqueueName\030\001 \001(\t\022\020\n\010"
    "capacity\030\002 \001(\002\022\027\n\017maximumCapacity\030\003 \001(\002\022"
    "\027\n\017currentCapacity\030\004 \001(\002\022+\n\005state\030\005 \001(\0162"
    "\034.hadoop.yarn.QueueStateProto\0220\n\013childQu"
    "eues\030\006 \003(\0132\033.hadoop.yarn.QueueInfoProto\022"
    "9\n\014applications\030\007 \003(\0132#.hadoop.yarn.Appl"
    "icationReportProto\"X\n\025QueueUserACLInfoPr"
    "oto\022\021\n\tqueueName\030\001 \001(\t\022,\n\010userAcls\030\002 \003(\016"
    "2\032.hadoop.yarn.QueueACLProto\"\257\002\n\033Contain"
    "erLaunchContextProto\022@\n\016localResources\030\001"
    " \003(\0132(.hadoop.yarn.StringLocalResourceMa"
    "pProto\022\016\n\006tokens\030\002 \001(\014\0226\n\014service_data\030\003"
    " \003(\0132 .hadoop.yarn.StringBytesMapProto\0226"
    "\n\013environment\030\004 \003(\0132!.hadoop.yarn.String"
    "StringMapProto\022\017\n\007command\030\005 \003(\t\022=\n\020appli"
    "cation_ACLs\030\006 \003(\0132#.hadoop.yarn.Applicat"
    "ionACLMapProto\"\262\001\n\024ContainerStatusProto\022"
    "3\n\014container_id\030\001 \001(\0132\035.hadoop.yarn.Cont"
    "ainerIdProto\022/\n\005state\030\002 \001(\0162 .hadoop.yar"
    "n.ContainerStateProto\022\030\n\013diagnostics\030\003 \001"
    "(\t:\003N/A\022\032\n\013exit_status\030\004 \001(\005:\005-1000\"Z\n\033S"
    "tringLocalResourceMapProto\022\013\n\003key\030\001 \001(\t\022"
    ".\n\005value\030\002 \001(\0132\037.hadoop.yarn.LocalResour"
    "ceProto\"2\n\024StringStringMapProto\022\013\n\003key\030\001"
    " \001(\t\022\r\n\005value\030\002 \001(\t\"1\n\023StringBytesMapPro"
    "to\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014*\?\n\023Contai"
    "nerStateProto\022\t\n\005C_NEW\020\001\022\r\n\tC_RUNNING\020\002\022"
    "\016\n\nC_COMPLETE\020\003*\204\001\n\031YarnApplicationState"
    "Proto\022\007\n\003NEW\020\001\022\016\n\nNEW_SAVING\020\002\022\r\n\tSUBMIT"
    "TED\020\003\022\014\n\010ACCEPTED\020\004\022\013\n\007RUNNING\020\005\022\014\n\010FINI"
    "SHED\020\006\022\n\n\006FAILED\020\007\022\n\n\006KILLED\020\010*c\n\033FinalA"
    "pplicationStatusProto\022\021\n\rAPP_UNDEFINED\020\000"
    "\022\021\n\rAPP_SUCCEEDED\020\001\022\016\n\nAPP_FAILED\020\002\022\016\n\nA"
    "PP_KILLED\020\003*H\n\034LocalResourceVisibilityPr"
    "oto\022\n\n\006PUBLIC\020\001\022\013\n\007PRIVATE\020\002\022\017\n\013APPLICAT"
    "ION\020\003*<\n\026LocalResourceTypeProto\022\013\n\007ARCHI"
    "VE\020\001\022\010\n\004FILE\020\002\022\013\n\007PATTERN\020\003*s\n\016NodeState"
    "Proto\022\n\n\006NS_NEW\020\001\022\016\n\nNS_RUNNING\020\002\022\020\n\014NS_"
    "UNHEALTHY\020\003\022\025\n\021NS_DECOMMISSIONED\020\004\022\013\n\007NS"
    "_LOST\020\005\022\017\n\013NS_REBOOTED\020\006*0\n\016AMCommandPro"
    "to\022\r\n\tAM_RESYNC\020\001\022\017\n\013AM_SHUTDOWN\020\002*N\n\032Ap"
    "plicationAccessTypeProto\022\026\n\022APPACCESS_VI"
    "EW_APP\020\001\022\030\n\024APPACCESS_MODIFY_APP\020\002*/\n\017Qu"
    "eueStateProto\022\r\n\tQ_STOPPED\020\001\022\r\n\tQ_RUNNIN"
    "G\020\002*H\n\rQueueACLProto\022\034\n\030QACL_SUBMIT_APPL"
    "ICATIONS\020\001\022\031\n\025QACL_ADMINISTER_QUEUE\020\002*n\n"
    "\030ContainerExitStatusProto\022\013\n\007SUCCESS\020\000\022\024"
    "\n\007INVALID\020\230\370\377\377\377\377\377\377\377\001\022\024\n\007ABORTED\020\234\377\377\377\377\377\377\377"
    "\377\001\022\031\n\014DISKS_FAILED\020\233\377\377\377\377\377\377\377\377\001B0\n\034org.apa"
    "che.hadoop.yarn.protoB\nYarnProtos\210\001\001\240\001\001", 5959);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "yarn_protos.proto", &protobuf_RegisterTypes);
  SerializedExceptionProto::default_instance_ = new SerializedExceptionProto();
  ApplicationIdProto::default_instance_ = new ApplicationIdProto();
  ApplicationAttemptIdProto::default_instance_ = new ApplicationAttemptIdProto();
  ContainerIdProto::default_instance_ = new ContainerIdProto();
  ResourceProto::default_instance_ = new ResourceProto();
  PriorityProto::default_instance_ = new PriorityProto();
  ContainerProto::default_instance_ = new ContainerProto();
  URLProto::default_instance_ = new URLProto();
  LocalResourceProto::default_instance_ = new LocalResourceProto();
  ApplicationResourceUsageReportProto::default_instance_ = new ApplicationResourceUsageReportProto();
  ApplicationReportProto::_default_diagnostics_ =
      new ::std::string("N/A", 3);
  ApplicationReportProto::default_instance_ = new ApplicationReportProto();
  NodeIdProto::default_instance_ = new NodeIdProto();
  NodeReportProto::default_instance_ = new NodeReportProto();
  ResourceRequestProto::default_instance_ = new ResourceRequestProto();
  PreemptionMessageProto::default_instance_ = new PreemptionMessageProto();
  StrictPreemptionContractProto::default_instance_ = new StrictPreemptionContractProto();
  PreemptionContractProto::default_instance_ = new PreemptionContractProto();
  PreemptionContainerProto::default_instance_ = new PreemptionContainerProto();
  PreemptionResourceRequestProto::default_instance_ = new PreemptionResourceRequestProto();
  ResourceBlacklistRequestProto::default_instance_ = new ResourceBlacklistRequestProto();
  ApplicationSubmissionContextProto::_default_application_name_ =
      new ::std::string("N/A", 3);
  ApplicationSubmissionContextProto::_default_queue_ =
      new ::std::string("default", 7);
  ApplicationSubmissionContextProto::_default_applicationtype_ =
      new ::std::string("YARN", 4);
  ApplicationSubmissionContextProto::default_instance_ = new ApplicationSubmissionContextProto();
  ApplicationACLMapProto::_default_acl_ =
      new ::std::string(" ", 1);
  ApplicationACLMapProto::default_instance_ = new ApplicationACLMapProto();
  YarnClusterMetricsProto::default_instance_ = new YarnClusterMetricsProto();
  QueueInfoProto::default_instance_ = new QueueInfoProto();
  QueueUserACLInfoProto::default_instance_ = new QueueUserACLInfoProto();
  ContainerLaunchContextProto::default_instance_ = new ContainerLaunchContextProto();
  ContainerStatusProto::_default_diagnostics_ =
      new ::std::string("N/A", 3);
  ContainerStatusProto::default_instance_ = new ContainerStatusProto();
  StringLocalResourceMapProto::default_instance_ = new StringLocalResourceMapProto();
  StringStringMapProto::default_instance_ = new StringStringMapProto();
  StringBytesMapProto::default_instance_ = new StringBytesMapProto();
  SerializedExceptionProto::default_instance_->InitAsDefaultInstance();
  ApplicationIdProto::default_instance_->InitAsDefaultInstance();
  ApplicationAttemptIdProto::default_instance_->InitAsDefaultInstance();
  ContainerIdProto::default_instance_->InitAsDefaultInstance();
  ResourceProto::default_instance_->InitAsDefaultInstance();
  PriorityProto::default_instance_->InitAsDefaultInstance();
  ContainerProto::default_instance_->InitAsDefaultInstance();
  URLProto::default_instance_->InitAsDefaultInstance();
  LocalResourceProto::default_instance_->InitAsDefaultInstance();
  ApplicationResourceUsageReportProto::default_instance_->InitAsDefaultInstance();
  ApplicationReportProto::default_instance_->InitAsDefaultInstance();
  NodeIdProto::default_instance_->InitAsDefaultInstance();
  NodeReportProto::default_instance_->InitAsDefaultInstance();
  ResourceRequestProto::default_instance_->InitAsDefaultInstance();
  PreemptionMessageProto::default_instance_->InitAsDefaultInstance();
  StrictPreemptionContractProto::default_instance_->InitAsDefaultInstance();
  PreemptionContractProto::default_instance_->InitAsDefaultInstance();
  PreemptionContainerProto::default_instance_->InitAsDefaultInstance();
  PreemptionResourceRequestProto::default_instance_->InitAsDefaultInstance();
  ResourceBlacklistRequestProto::default_instance_->InitAsDefaultInstance();
  ApplicationSubmissionContextProto::default_instance_->InitAsDefaultInstance();
  ApplicationACLMapProto::default_instance_->InitAsDefaultInstance();
  YarnClusterMetricsProto::default_instance_->InitAsDefaultInstance();
  QueueInfoProto::default_instance_->InitAsDefaultInstance();
  QueueUserACLInfoProto::default_instance_->InitAsDefaultInstance();
  ContainerLaunchContextProto::default_instance_->InitAsDefaultInstance();
  ContainerStatusProto::default_instance_->InitAsDefaultInstance();
  StringLocalResourceMapProto::default_instance_->InitAsDefaultInstance();
  StringStringMapProto::default_instance_->InitAsDefaultInstance();
  StringBytesMapProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yarn_5fprotos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yarn_5fprotos_2eproto {
  StaticDescriptorInitializer_yarn_5fprotos_2eproto() {
    protobuf_AddDesc_yarn_5fprotos_2eproto();
  }
} static_descriptor_initializer_yarn_5fprotos_2eproto_;
const ::google::protobuf::EnumDescriptor* ContainerStateProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerStateProto_descriptor_;
}
bool ContainerStateProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* YarnApplicationStateProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YarnApplicationStateProto_descriptor_;
}
bool YarnApplicationStateProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FinalApplicationStatusProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalApplicationStatusProto_descriptor_;
}
bool FinalApplicationStatusProto_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalResourceVisibilityProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalResourceVisibilityProto_descriptor_;
}
bool LocalResourceVisibilityProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalResourceTypeProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalResourceTypeProto_descriptor_;
}
bool LocalResourceTypeProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeStateProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStateProto_descriptor_;
}
bool NodeStateProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AMCommandProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AMCommandProto_descriptor_;
}
bool AMCommandProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplicationAccessTypeProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationAccessTypeProto_descriptor_;
}
bool ApplicationAccessTypeProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QueueStateProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueStateProto_descriptor_;
}
bool QueueStateProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QueueACLProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueACLProto_descriptor_;
}
bool QueueACLProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContainerExitStatusProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerExitStatusProto_descriptor_;
}
bool ContainerExitStatusProto_IsValid(int value) {
  switch(value) {
    case -1000:
    case -101:
    case -100:
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SerializedExceptionProto::kMessageFieldNumber;
const int SerializedExceptionProto::kTraceFieldNumber;
const int SerializedExceptionProto::kClassNameFieldNumber;
const int SerializedExceptionProto::kCauseFieldNumber;
#endif  // !_MSC_VER

SerializedExceptionProto::SerializedExceptionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SerializedExceptionProto::InitAsDefaultInstance() {
  cause_ = const_cast< ::hadoop::yarn::SerializedExceptionProto*>(&::hadoop::yarn::SerializedExceptionProto::default_instance());
}

SerializedExceptionProto::SerializedExceptionProto(const SerializedExceptionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SerializedExceptionProto::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cause_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerializedExceptionProto::~SerializedExceptionProto() {
  SharedDtor();
}

void SerializedExceptionProto::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (trace_ != &::google::protobuf::internal::kEmptyString) {
    delete trace_;
  }
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (this != default_instance_) {
    delete cause_;
  }
}

void SerializedExceptionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedExceptionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedExceptionProto_descriptor_;
}

const SerializedExceptionProto& SerializedExceptionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

SerializedExceptionProto* SerializedExceptionProto::default_instance_ = NULL;

SerializedExceptionProto* SerializedExceptionProto::New() const {
  return new SerializedExceptionProto;
}

void SerializedExceptionProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_trace()) {
      if (trace_ != &::google::protobuf::internal::kEmptyString) {
        trace_->clear();
      }
    }
    if (has_class_name()) {
      if (class_name_ != &::google::protobuf::internal::kEmptyString) {
        class_name_->clear();
      }
    }
    if (has_cause()) {
      if (cause_ != NULL) cause_->::hadoop::yarn::SerializedExceptionProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SerializedExceptionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trace;
        break;
      }

      // optional string trace = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trace().data(), this->trace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_class_name;
        break;
      }

      // optional string class_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cause;
        break;
      }

      // optional .hadoop.yarn.SerializedExceptionProto cause = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cause()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SerializedExceptionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  // optional string trace = 2;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trace().data(), this->trace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trace(), output);
  }

  // optional string class_name = 3;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->class_name(), output);
  }

  // optional .hadoop.yarn.SerializedExceptionProto cause = 4;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SerializedExceptionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional string trace = 2;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trace().data(), this->trace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trace(), target);
  }

  // optional string class_name = 3;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->class_name(), target);
  }

  // optional .hadoop.yarn.SerializedExceptionProto cause = 4;
  if (has_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SerializedExceptionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string trace = 2;
    if (has_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trace());
    }

    // optional string class_name = 3;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional .hadoop.yarn.SerializedExceptionProto cause = 4;
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cause());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedExceptionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SerializedExceptionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SerializedExceptionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SerializedExceptionProto::MergeFrom(const SerializedExceptionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_trace()) {
      set_trace(from.trace());
    }
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
    if (from.has_cause()) {
      mutable_cause()->::hadoop::yarn::SerializedExceptionProto::MergeFrom(from.cause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SerializedExceptionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedExceptionProto::CopyFrom(const SerializedExceptionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedExceptionProto::IsInitialized() const {

  return true;
}

void SerializedExceptionProto::Swap(SerializedExceptionProto* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(trace_, other->trace_);
    std::swap(class_name_, other->class_name_);
    std::swap(cause_, other->cause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SerializedExceptionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedExceptionProto_descriptor_;
  metadata.reflection = SerializedExceptionProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationIdProto::kIdFieldNumber;
const int ApplicationIdProto::kClusterTimestampFieldNumber;
#endif  // !_MSC_VER

ApplicationIdProto::ApplicationIdProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationIdProto::InitAsDefaultInstance() {
}

ApplicationIdProto::ApplicationIdProto(const ApplicationIdProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationIdProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cluster_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationIdProto::~ApplicationIdProto() {
  SharedDtor();
}

void ApplicationIdProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplicationIdProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationIdProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationIdProto_descriptor_;
}

const ApplicationIdProto& ApplicationIdProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ApplicationIdProto* ApplicationIdProto::default_instance_ = NULL;

ApplicationIdProto* ApplicationIdProto::New() const {
  return new ApplicationIdProto;
}

void ApplicationIdProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cluster_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationIdProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cluster_timestamp;
        break;
      }

      // optional int64 cluster_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cluster_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cluster_timestamp_)));
          set_has_cluster_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationIdProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 cluster_timestamp = 2;
  if (has_cluster_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cluster_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationIdProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 cluster_timestamp = 2;
  if (has_cluster_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cluster_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationIdProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 cluster_timestamp = 2;
    if (has_cluster_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cluster_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationIdProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationIdProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationIdProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationIdProto::MergeFrom(const ApplicationIdProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cluster_timestamp()) {
      set_cluster_timestamp(from.cluster_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationIdProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationIdProto::CopyFrom(const ApplicationIdProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationIdProto::IsInitialized() const {

  return true;
}

void ApplicationIdProto::Swap(ApplicationIdProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cluster_timestamp_, other->cluster_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationIdProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationIdProto_descriptor_;
  metadata.reflection = ApplicationIdProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationAttemptIdProto::kApplicationIdFieldNumber;
const int ApplicationAttemptIdProto::kAttemptIdFieldNumber;
#endif  // !_MSC_VER

ApplicationAttemptIdProto::ApplicationAttemptIdProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationAttemptIdProto::InitAsDefaultInstance() {
  application_id_ = const_cast< ::hadoop::yarn::ApplicationIdProto*>(&::hadoop::yarn::ApplicationIdProto::default_instance());
}

ApplicationAttemptIdProto::ApplicationAttemptIdProto(const ApplicationAttemptIdProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationAttemptIdProto::SharedCtor() {
  _cached_size_ = 0;
  application_id_ = NULL;
  attemptid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationAttemptIdProto::~ApplicationAttemptIdProto() {
  SharedDtor();
}

void ApplicationAttemptIdProto::SharedDtor() {
  if (this != default_instance_) {
    delete application_id_;
  }
}

void ApplicationAttemptIdProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationAttemptIdProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationAttemptIdProto_descriptor_;
}

const ApplicationAttemptIdProto& ApplicationAttemptIdProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ApplicationAttemptIdProto* ApplicationAttemptIdProto::default_instance_ = NULL;

ApplicationAttemptIdProto* ApplicationAttemptIdProto::New() const {
  return new ApplicationAttemptIdProto;
}

void ApplicationAttemptIdProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_application_id()) {
      if (application_id_ != NULL) application_id_->::hadoop::yarn::ApplicationIdProto::Clear();
    }
    attemptid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationAttemptIdProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ApplicationIdProto application_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attemptId;
        break;
      }

      // optional int32 attemptId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attemptId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attemptid_)));
          set_has_attemptid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationAttemptIdProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ApplicationIdProto application_id = 1;
  if (has_application_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->application_id(), output);
  }

  // optional int32 attemptId = 2;
  if (has_attemptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attemptid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationAttemptIdProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ApplicationIdProto application_id = 1;
  if (has_application_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->application_id(), target);
  }

  // optional int32 attemptId = 2;
  if (has_attemptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attemptid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationAttemptIdProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ApplicationIdProto application_id = 1;
    if (has_application_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_id());
    }

    // optional int32 attemptId = 2;
    if (has_attemptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attemptid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationAttemptIdProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationAttemptIdProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationAttemptIdProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationAttemptIdProto::MergeFrom(const ApplicationAttemptIdProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_id()) {
      mutable_application_id()->::hadoop::yarn::ApplicationIdProto::MergeFrom(from.application_id());
    }
    if (from.has_attemptid()) {
      set_attemptid(from.attemptid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationAttemptIdProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationAttemptIdProto::CopyFrom(const ApplicationAttemptIdProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationAttemptIdProto::IsInitialized() const {

  return true;
}

void ApplicationAttemptIdProto::Swap(ApplicationAttemptIdProto* other) {
  if (other != this) {
    std::swap(application_id_, other->application_id_);
    std::swap(attemptid_, other->attemptid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationAttemptIdProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationAttemptIdProto_descriptor_;
  metadata.reflection = ApplicationAttemptIdProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerIdProto::kAppIdFieldNumber;
const int ContainerIdProto::kAppAttemptIdFieldNumber;
const int ContainerIdProto::kIdFieldNumber;
#endif  // !_MSC_VER

ContainerIdProto::ContainerIdProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerIdProto::InitAsDefaultInstance() {
  app_id_ = const_cast< ::hadoop::yarn::ApplicationIdProto*>(&::hadoop::yarn::ApplicationIdProto::default_instance());
  app_attempt_id_ = const_cast< ::hadoop::yarn::ApplicationAttemptIdProto*>(&::hadoop::yarn::ApplicationAttemptIdProto::default_instance());
}

ContainerIdProto::ContainerIdProto(const ContainerIdProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerIdProto::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = NULL;
  app_attempt_id_ = NULL;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerIdProto::~ContainerIdProto() {
  SharedDtor();
}

void ContainerIdProto::SharedDtor() {
  if (this != default_instance_) {
    delete app_id_;
    delete app_attempt_id_;
  }
}

void ContainerIdProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerIdProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerIdProto_descriptor_;
}

const ContainerIdProto& ContainerIdProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ContainerIdProto* ContainerIdProto::default_instance_ = NULL;

ContainerIdProto* ContainerIdProto::New() const {
  return new ContainerIdProto;
}

void ContainerIdProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::hadoop::yarn::ApplicationIdProto::Clear();
    }
    if (has_app_attempt_id()) {
      if (app_attempt_id_ != NULL) app_attempt_id_->::hadoop::yarn::ApplicationAttemptIdProto::Clear();
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerIdProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ApplicationIdProto app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_attempt_id;
        break;
      }

      // optional .hadoop.yarn.ApplicationAttemptIdProto app_attempt_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_attempt_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_attempt_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerIdProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ApplicationIdProto app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->app_id(), output);
  }

  // optional .hadoop.yarn.ApplicationAttemptIdProto app_attempt_id = 2;
  if (has_app_attempt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->app_attempt_id(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerIdProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ApplicationIdProto app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->app_id(), target);
  }

  // optional .hadoop.yarn.ApplicationAttemptIdProto app_attempt_id = 2;
  if (has_app_attempt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->app_attempt_id(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerIdProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ApplicationIdProto app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }

    // optional .hadoop.yarn.ApplicationAttemptIdProto app_attempt_id = 2;
    if (has_app_attempt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_attempt_id());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerIdProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerIdProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerIdProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerIdProto::MergeFrom(const ContainerIdProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      mutable_app_id()->::hadoop::yarn::ApplicationIdProto::MergeFrom(from.app_id());
    }
    if (from.has_app_attempt_id()) {
      mutable_app_attempt_id()->::hadoop::yarn::ApplicationAttemptIdProto::MergeFrom(from.app_attempt_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerIdProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerIdProto::CopyFrom(const ContainerIdProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerIdProto::IsInitialized() const {

  return true;
}

void ContainerIdProto::Swap(ContainerIdProto* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(app_attempt_id_, other->app_attempt_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerIdProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerIdProto_descriptor_;
  metadata.reflection = ContainerIdProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceProto::kMemoryFieldNumber;
const int ResourceProto::kVirtualCoresFieldNumber;
#endif  // !_MSC_VER

ResourceProto::ResourceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceProto::InitAsDefaultInstance() {
}

ResourceProto::ResourceProto(const ResourceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceProto::SharedCtor() {
  _cached_size_ = 0;
  memory_ = 0;
  virtual_cores_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceProto::~ResourceProto() {
  SharedDtor();
}

void ResourceProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceProto_descriptor_;
}

const ResourceProto& ResourceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ResourceProto* ResourceProto::default_instance_ = NULL;

ResourceProto* ResourceProto::New() const {
  return new ResourceProto;
}

void ResourceProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memory_ = 0;
    virtual_cores_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 memory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_virtual_cores;
        break;
      }

      // optional int32 virtual_cores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtual_cores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &virtual_cores_)));
          set_has_virtual_cores();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 memory = 1;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->memory(), output);
  }

  // optional int32 virtual_cores = 2;
  if (has_virtual_cores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->virtual_cores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 memory = 1;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->memory(), target);
  }

  // optional int32 virtual_cores = 2;
  if (has_virtual_cores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->virtual_cores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 memory = 1;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory());
    }

    // optional int32 virtual_cores = 2;
    if (has_virtual_cores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtual_cores());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceProto::MergeFrom(const ResourceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_virtual_cores()) {
      set_virtual_cores(from.virtual_cores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceProto::CopyFrom(const ResourceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceProto::IsInitialized() const {

  return true;
}

void ResourceProto::Swap(ResourceProto* other) {
  if (other != this) {
    std::swap(memory_, other->memory_);
    std::swap(virtual_cores_, other->virtual_cores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceProto_descriptor_;
  metadata.reflection = ResourceProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriorityProto::kPriorityFieldNumber;
#endif  // !_MSC_VER

PriorityProto::PriorityProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriorityProto::InitAsDefaultInstance() {
}

PriorityProto::PriorityProto(const PriorityProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriorityProto::SharedCtor() {
  _cached_size_ = 0;
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriorityProto::~PriorityProto() {
  SharedDtor();
}

void PriorityProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PriorityProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriorityProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriorityProto_descriptor_;
}

const PriorityProto& PriorityProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

PriorityProto* PriorityProto::default_instance_ = NULL;

PriorityProto* PriorityProto::New() const {
  return new PriorityProto;
}

void PriorityProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    priority_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriorityProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 priority = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriorityProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 priority = 1;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriorityProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 priority = 1;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriorityProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 priority = 1;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriorityProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriorityProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriorityProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriorityProto::MergeFrom(const PriorityProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriorityProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriorityProto::CopyFrom(const PriorityProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriorityProto::IsInitialized() const {

  return true;
}

void PriorityProto::Swap(PriorityProto* other) {
  if (other != this) {
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriorityProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriorityProto_descriptor_;
  metadata.reflection = PriorityProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerProto::kIdFieldNumber;
const int ContainerProto::kNodeIdFieldNumber;
const int ContainerProto::kNodeHttpAddressFieldNumber;
const int ContainerProto::kResourceFieldNumber;
const int ContainerProto::kPriorityFieldNumber;
const int ContainerProto::kContainerTokenFieldNumber;
#endif  // !_MSC_VER

ContainerProto::ContainerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerProto::InitAsDefaultInstance() {
  id_ = const_cast< ::hadoop::yarn::ContainerIdProto*>(&::hadoop::yarn::ContainerIdProto::default_instance());
  nodeid_ = const_cast< ::hadoop::yarn::NodeIdProto*>(&::hadoop::yarn::NodeIdProto::default_instance());
  resource_ = const_cast< ::hadoop::yarn::ResourceProto*>(&::hadoop::yarn::ResourceProto::default_instance());
  priority_ = const_cast< ::hadoop::yarn::PriorityProto*>(&::hadoop::yarn::PriorityProto::default_instance());
  container_token_ = const_cast< ::hadoop::common::TokenProto*>(&::hadoop::common::TokenProto::default_instance());
}

ContainerProto::ContainerProto(const ContainerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  nodeid_ = NULL;
  node_http_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_ = NULL;
  priority_ = NULL;
  container_token_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerProto::~ContainerProto() {
  SharedDtor();
}

void ContainerProto::SharedDtor() {
  if (node_http_address_ != &::google::protobuf::internal::kEmptyString) {
    delete node_http_address_;
  }
  if (this != default_instance_) {
    delete id_;
    delete nodeid_;
    delete resource_;
    delete priority_;
    delete container_token_;
  }
}

void ContainerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerProto_descriptor_;
}

const ContainerProto& ContainerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ContainerProto* ContainerProto::default_instance_ = NULL;

ContainerProto* ContainerProto::New() const {
  return new ContainerProto;
}

void ContainerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::hadoop::yarn::ContainerIdProto::Clear();
    }
    if (has_nodeid()) {
      if (nodeid_ != NULL) nodeid_->::hadoop::yarn::NodeIdProto::Clear();
    }
    if (has_node_http_address()) {
      if (node_http_address_ != &::google::protobuf::internal::kEmptyString) {
        node_http_address_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != NULL) resource_->::hadoop::yarn::ResourceProto::Clear();
    }
    if (has_priority()) {
      if (priority_ != NULL) priority_->::hadoop::yarn::PriorityProto::Clear();
    }
    if (has_container_token()) {
      if (container_token_ != NULL) container_token_->::hadoop::common::TokenProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ContainerIdProto id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeId;
        break;
      }

      // optional .hadoop.yarn.NodeIdProto nodeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node_http_address;
        break;
      }

      // optional string node_http_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_http_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_http_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_http_address().data(), this->node_http_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource;
        break;
      }

      // optional .hadoop.yarn.ResourceProto resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_priority;
        break;
      }

      // optional .hadoop.yarn.PriorityProto priority = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_priority:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priority()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_container_token;
        break;
      }

      // optional .hadoop.common.TokenProto container_token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ContainerIdProto id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .hadoop.yarn.NodeIdProto nodeId = 2;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodeid(), output);
  }

  // optional string node_http_address = 3;
  if (has_node_http_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_http_address().data(), this->node_http_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->node_http_address(), output);
  }

  // optional .hadoop.yarn.ResourceProto resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resource(), output);
  }

  // optional .hadoop.yarn.PriorityProto priority = 5;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->priority(), output);
  }

  // optional .hadoop.common.TokenProto container_token = 6;
  if (has_container_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->container_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ContainerIdProto id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .hadoop.yarn.NodeIdProto nodeId = 2;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodeid(), target);
  }

  // optional string node_http_address = 3;
  if (has_node_http_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_http_address().data(), this->node_http_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_http_address(), target);
  }

  // optional .hadoop.yarn.ResourceProto resource = 4;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resource(), target);
  }

  // optional .hadoop.yarn.PriorityProto priority = 5;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->priority(), target);
  }

  // optional .hadoop.common.TokenProto container_token = 6;
  if (has_container_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->container_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ContainerIdProto id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .hadoop.yarn.NodeIdProto nodeId = 2;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodeid());
    }

    // optional string node_http_address = 3;
    if (has_node_http_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_http_address());
    }

    // optional .hadoop.yarn.ResourceProto resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

    // optional .hadoop.yarn.PriorityProto priority = 5;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priority());
    }

    // optional .hadoop.common.TokenProto container_token = 6;
    if (has_container_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerProto::MergeFrom(const ContainerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hadoop::yarn::ContainerIdProto::MergeFrom(from.id());
    }
    if (from.has_nodeid()) {
      mutable_nodeid()->::hadoop::yarn::NodeIdProto::MergeFrom(from.nodeid());
    }
    if (from.has_node_http_address()) {
      set_node_http_address(from.node_http_address());
    }
    if (from.has_resource()) {
      mutable_resource()->::hadoop::yarn::ResourceProto::MergeFrom(from.resource());
    }
    if (from.has_priority()) {
      mutable_priority()->::hadoop::yarn::PriorityProto::MergeFrom(from.priority());
    }
    if (from.has_container_token()) {
      mutable_container_token()->::hadoop::common::TokenProto::MergeFrom(from.container_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerProto::CopyFrom(const ContainerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerProto::IsInitialized() const {

  if (has_container_token()) {
    if (!this->container_token().IsInitialized()) return false;
  }
  return true;
}

void ContainerProto::Swap(ContainerProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nodeid_, other->nodeid_);
    std::swap(node_http_address_, other->node_http_address_);
    std::swap(resource_, other->resource_);
    std::swap(priority_, other->priority_);
    std::swap(container_token_, other->container_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerProto_descriptor_;
  metadata.reflection = ContainerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int URLProto::kSchemeFieldNumber;
const int URLProto::kHostFieldNumber;
const int URLProto::kPortFieldNumber;
const int URLProto::kFileFieldNumber;
const int URLProto::kUserInfoFieldNumber;
#endif  // !_MSC_VER

URLProto::URLProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void URLProto::InitAsDefaultInstance() {
}

URLProto::URLProto(const URLProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void URLProto::SharedCtor() {
  _cached_size_ = 0;
  scheme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

URLProto::~URLProto() {
  SharedDtor();
}

void URLProto::SharedDtor() {
  if (scheme_ != &::google::protobuf::internal::kEmptyString) {
    delete scheme_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (userinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete userinfo_;
  }
  if (this != default_instance_) {
  }
}

void URLProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* URLProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return URLProto_descriptor_;
}

const URLProto& URLProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

URLProto* URLProto::default_instance_ = NULL;

URLProto* URLProto::New() const {
  return new URLProto;
}

void URLProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scheme()) {
      if (scheme_ != &::google::protobuf::internal::kEmptyString) {
        scheme_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != &::google::protobuf::internal::kEmptyString) {
        userinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool URLProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scheme = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scheme().data(), this->scheme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // optional string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file;
        break;
      }

      // optional string file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userInfo;
        break;
      }

      // optional string userInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userinfo().data(), this->userinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void URLProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string scheme = 1;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scheme().data(), this->scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->scheme(), output);
  }

  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string file = 4;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file(), output);
  }

  // optional string userInfo = 5;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userinfo().data(), this->userinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* URLProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string scheme = 1;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scheme().data(), this->scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scheme(), target);
  }

  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string file = 4;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file(), target);
  }

  // optional string userInfo = 5;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userinfo().data(), this->userinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int URLProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string scheme = 1;
    if (has_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scheme());
    }

    // optional string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string file = 4;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional string userInfo = 5;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void URLProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const URLProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const URLProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void URLProto::MergeFrom(const URLProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scheme()) {
      set_scheme(from.scheme());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_userinfo()) {
      set_userinfo(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void URLProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URLProto::CopyFrom(const URLProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URLProto::IsInitialized() const {

  return true;
}

void URLProto::Swap(URLProto* other) {
  if (other != this) {
    std::swap(scheme_, other->scheme_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(file_, other->file_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata URLProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = URLProto_descriptor_;
  metadata.reflection = URLProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalResourceProto::kResourceFieldNumber;
const int LocalResourceProto::kSizeFieldNumber;
const int LocalResourceProto::kTimestampFieldNumber;
const int LocalResourceProto::kTypeFieldNumber;
const int LocalResourceProto::kVisibilityFieldNumber;
const int LocalResourceProto::kPatternFieldNumber;
#endif  // !_MSC_VER

LocalResourceProto::LocalResourceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalResourceProto::InitAsDefaultInstance() {
  resource_ = const_cast< ::hadoop::yarn::URLProto*>(&::hadoop::yarn::URLProto::default_instance());
}

LocalResourceProto::LocalResourceProto(const LocalResourceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalResourceProto::SharedCtor() {
  _cached_size_ = 0;
  resource_ = NULL;
  size_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  visibility_ = 1;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalResourceProto::~LocalResourceProto() {
  SharedDtor();
}

void LocalResourceProto::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete pattern_;
  }
  if (this != default_instance_) {
    delete resource_;
  }
}

void LocalResourceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalResourceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalResourceProto_descriptor_;
}

const LocalResourceProto& LocalResourceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

LocalResourceProto* LocalResourceProto::default_instance_ = NULL;

LocalResourceProto* LocalResourceProto::New() const {
  return new LocalResourceProto;
}

void LocalResourceProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_resource()) {
      if (resource_ != NULL) resource_->::hadoop::yarn::URLProto::Clear();
    }
    size_ = GOOGLE_LONGLONG(0);
    timestamp_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    visibility_ = 1;
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::kEmptyString) {
        pattern_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalResourceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.URLProto resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional int64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .hadoop.yarn.LocalResourceTypeProto type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::LocalResourceTypeProto_IsValid(value)) {
            set_type(static_cast< ::hadoop::yarn::LocalResourceTypeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_visibility;
        break;
      }

      // optional .hadoop.yarn.LocalResourceVisibilityProto visibility = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::LocalResourceVisibilityProto_IsValid(value)) {
            set_visibility(static_cast< ::hadoop::yarn::LocalResourceVisibilityProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pattern;
        break;
      }

      // optional string pattern = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalResourceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.URLProto resource = 1;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resource(), output);
  }

  // optional int64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional .hadoop.yarn.LocalResourceTypeProto type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .hadoop.yarn.LocalResourceVisibilityProto visibility = 5;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->visibility(), output);
  }

  // optional string pattern = 6;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pattern(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalResourceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.URLProto resource = 1;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource(), target);
  }

  // optional int64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional .hadoop.yarn.LocalResourceTypeProto type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .hadoop.yarn.LocalResourceVisibilityProto visibility = 5;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->visibility(), target);
  }

  // optional string pattern = 6;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pattern(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalResourceProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.URLProto resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

    // optional int64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .hadoop.yarn.LocalResourceTypeProto type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .hadoop.yarn.LocalResourceVisibilityProto visibility = 5;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional string pattern = 6;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalResourceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalResourceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalResourceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalResourceProto::MergeFrom(const LocalResourceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource()) {
      mutable_resource()->::hadoop::yarn::URLProto::MergeFrom(from.resource());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalResourceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalResourceProto::CopyFrom(const LocalResourceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalResourceProto::IsInitialized() const {

  return true;
}

void LocalResourceProto::Swap(LocalResourceProto* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    std::swap(size_, other->size_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(visibility_, other->visibility_);
    std::swap(pattern_, other->pattern_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalResourceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalResourceProto_descriptor_;
  metadata.reflection = LocalResourceProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationResourceUsageReportProto::kNumUsedContainersFieldNumber;
const int ApplicationResourceUsageReportProto::kNumReservedContainersFieldNumber;
const int ApplicationResourceUsageReportProto::kUsedResourcesFieldNumber;
const int ApplicationResourceUsageReportProto::kReservedResourcesFieldNumber;
const int ApplicationResourceUsageReportProto::kNeededResourcesFieldNumber;
#endif  // !_MSC_VER

ApplicationResourceUsageReportProto::ApplicationResourceUsageReportProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationResourceUsageReportProto::InitAsDefaultInstance() {
  used_resources_ = const_cast< ::hadoop::yarn::ResourceProto*>(&::hadoop::yarn::ResourceProto::default_instance());
  reserved_resources_ = const_cast< ::hadoop::yarn::ResourceProto*>(&::hadoop::yarn::ResourceProto::default_instance());
  needed_resources_ = const_cast< ::hadoop::yarn::ResourceProto*>(&::hadoop::yarn::ResourceProto::default_instance());
}

ApplicationResourceUsageReportProto::ApplicationResourceUsageReportProto(const ApplicationResourceUsageReportProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationResourceUsageReportProto::SharedCtor() {
  _cached_size_ = 0;
  num_used_containers_ = 0;
  num_reserved_containers_ = 0;
  used_resources_ = NULL;
  reserved_resources_ = NULL;
  needed_resources_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationResourceUsageReportProto::~ApplicationResourceUsageReportProto() {
  SharedDtor();
}

void ApplicationResourceUsageReportProto::SharedDtor() {
  if (this != default_instance_) {
    delete used_resources_;
    delete reserved_resources_;
    delete needed_resources_;
  }
}

void ApplicationResourceUsageReportProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationResourceUsageReportProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationResourceUsageReportProto_descriptor_;
}

const ApplicationResourceUsageReportProto& ApplicationResourceUsageReportProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ApplicationResourceUsageReportProto* ApplicationResourceUsageReportProto::default_instance_ = NULL;

ApplicationResourceUsageReportProto* ApplicationResourceUsageReportProto::New() const {
  return new ApplicationResourceUsageReportProto;
}

void ApplicationResourceUsageReportProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_used_containers_ = 0;
    num_reserved_containers_ = 0;
    if (has_used_resources()) {
      if (used_resources_ != NULL) used_resources_->::hadoop::yarn::ResourceProto::Clear();
    }
    if (has_reserved_resources()) {
      if (reserved_resources_ != NULL) reserved_resources_->::hadoop::yarn::ResourceProto::Clear();
    }
    if (has_needed_resources()) {
      if (needed_resources_ != NULL) needed_resources_->::hadoop::yarn::ResourceProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationResourceUsageReportProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_used_containers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_used_containers_)));
          set_has_num_used_containers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_reserved_containers;
        break;
      }

      // optional int32 num_reserved_containers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_reserved_containers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reserved_containers_)));
          set_has_num_reserved_containers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_used_resources;
        break;
      }

      // optional .hadoop.yarn.ResourceProto used_resources = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_used_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_used_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reserved_resources;
        break;
      }

      // optional .hadoop.yarn.ResourceProto reserved_resources = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reserved_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reserved_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_needed_resources;
        break;
      }

      // optional .hadoop.yarn.ResourceProto needed_resources = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needed_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_needed_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationResourceUsageReportProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_used_containers = 1;
  if (has_num_used_containers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_used_containers(), output);
  }

  // optional int32 num_reserved_containers = 2;
  if (has_num_reserved_containers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_reserved_containers(), output);
  }

  // optional .hadoop.yarn.ResourceProto used_resources = 3;
  if (has_used_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->used_resources(), output);
  }

  // optional .hadoop.yarn.ResourceProto reserved_resources = 4;
  if (has_reserved_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reserved_resources(), output);
  }

  // optional .hadoop.yarn.ResourceProto needed_resources = 5;
  if (has_needed_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->needed_resources(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationResourceUsageReportProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_used_containers = 1;
  if (has_num_used_containers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_used_containers(), target);
  }

  // optional int32 num_reserved_containers = 2;
  if (has_num_reserved_containers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_reserved_containers(), target);
  }

  // optional .hadoop.yarn.ResourceProto used_resources = 3;
  if (has_used_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->used_resources(), target);
  }

  // optional .hadoop.yarn.ResourceProto reserved_resources = 4;
  if (has_reserved_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reserved_resources(), target);
  }

  // optional .hadoop.yarn.ResourceProto needed_resources = 5;
  if (has_needed_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->needed_resources(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationResourceUsageReportProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_used_containers = 1;
    if (has_num_used_containers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_used_containers());
    }

    // optional int32 num_reserved_containers = 2;
    if (has_num_reserved_containers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_reserved_containers());
    }

    // optional .hadoop.yarn.ResourceProto used_resources = 3;
    if (has_used_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->used_resources());
    }

    // optional .hadoop.yarn.ResourceProto reserved_resources = 4;
    if (has_reserved_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reserved_resources());
    }

    // optional .hadoop.yarn.ResourceProto needed_resources = 5;
    if (has_needed_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->needed_resources());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationResourceUsageReportProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationResourceUsageReportProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationResourceUsageReportProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationResourceUsageReportProto::MergeFrom(const ApplicationResourceUsageReportProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_used_containers()) {
      set_num_used_containers(from.num_used_containers());
    }
    if (from.has_num_reserved_containers()) {
      set_num_reserved_containers(from.num_reserved_containers());
    }
    if (from.has_used_resources()) {
      mutable_used_resources()->::hadoop::yarn::ResourceProto::MergeFrom(from.used_resources());
    }
    if (from.has_reserved_resources()) {
      mutable_reserved_resources()->::hadoop::yarn::ResourceProto::MergeFrom(from.reserved_resources());
    }
    if (from.has_needed_resources()) {
      mutable_needed_resources()->::hadoop::yarn::ResourceProto::MergeFrom(from.needed_resources());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationResourceUsageReportProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationResourceUsageReportProto::CopyFrom(const ApplicationResourceUsageReportProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationResourceUsageReportProto::IsInitialized() const {

  return true;
}

void ApplicationResourceUsageReportProto::Swap(ApplicationResourceUsageReportProto* other) {
  if (other != this) {
    std::swap(num_used_containers_, other->num_used_containers_);
    std::swap(num_reserved_containers_, other->num_reserved_containers_);
    std::swap(used_resources_, other->used_resources_);
    std::swap(reserved_resources_, other->reserved_resources_);
    std::swap(needed_resources_, other->needed_resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationResourceUsageReportProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationResourceUsageReportProto_descriptor_;
  metadata.reflection = ApplicationResourceUsageReportProto_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ApplicationReportProto::_default_diagnostics_ = NULL;
#ifndef _MSC_VER
const int ApplicationReportProto::kApplicationIdFieldNumber;
const int ApplicationReportProto::kUserFieldNumber;
const int ApplicationReportProto::kQueueFieldNumber;
const int ApplicationReportProto::kNameFieldNumber;
const int ApplicationReportProto::kHostFieldNumber;
const int ApplicationReportProto::kRpcPortFieldNumber;
const int ApplicationReportProto::kClientToAmTokenFieldNumber;
const int ApplicationReportProto::kYarnApplicationStateFieldNumber;
const int ApplicationReportProto::kTrackingUrlFieldNumber;
const int ApplicationReportProto::kDiagnosticsFieldNumber;
const int ApplicationReportProto::kStartTimeFieldNumber;
const int ApplicationReportProto::kFinishTimeFieldNumber;
const int ApplicationReportProto::kFinalApplicationStatusFieldNumber;
const int ApplicationReportProto::kAppResourceUsageFieldNumber;
const int ApplicationReportProto::kOriginalTrackingUrlFieldNumber;
const int ApplicationReportProto::kCurrentApplicationAttemptIdFieldNumber;
const int ApplicationReportProto::kProgressFieldNumber;
const int ApplicationReportProto::kApplicationTypeFieldNumber;
const int ApplicationReportProto::kAmRmTokenFieldNumber;
#endif  // !_MSC_VER

ApplicationReportProto::ApplicationReportProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationReportProto::InitAsDefaultInstance() {
  applicationid_ = const_cast< ::hadoop::yarn::ApplicationIdProto*>(&::hadoop::yarn::ApplicationIdProto::default_instance());
  client_to_am_token_ = const_cast< ::hadoop::common::TokenProto*>(&::hadoop::common::TokenProto::default_instance());
  app_resource_usage_ = const_cast< ::hadoop::yarn::ApplicationResourceUsageReportProto*>(&::hadoop::yarn::ApplicationResourceUsageReportProto::default_instance());
  currentapplicationattemptid_ = const_cast< ::hadoop::yarn::ApplicationAttemptIdProto*>(&::hadoop::yarn::ApplicationAttemptIdProto::default_instance());
  am_rm_token_ = const_cast< ::hadoop::common::TokenProto*>(&::hadoop::common::TokenProto::default_instance());
}

ApplicationReportProto::ApplicationReportProto(const ApplicationReportProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationReportProto::SharedCtor() {
  _cached_size_ = 0;
  applicationid_ = NULL;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  queue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rpc_port_ = 0;
  client_to_am_token_ = NULL;
  yarn_application_state_ = 1;
  trackingurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diagnostics_ = const_cast< ::std::string*>(_default_diagnostics_);
  starttime_ = GOOGLE_LONGLONG(0);
  finishtime_ = GOOGLE_LONGLONG(0);
  final_application_status_ = 0;
  app_resource_usage_ = NULL;
  originaltrackingurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentapplicationattemptid_ = NULL;
  progress_ = 0;
  applicationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  am_rm_token_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationReportProto::~ApplicationReportProto() {
  SharedDtor();
}

void ApplicationReportProto::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (queue_ != &::google::protobuf::internal::kEmptyString) {
    delete queue_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (trackingurl_ != &::google::protobuf::internal::kEmptyString) {
    delete trackingurl_;
  }
  if (diagnostics_ != _default_diagnostics_) {
    delete diagnostics_;
  }
  if (originaltrackingurl_ != &::google::protobuf::internal::kEmptyString) {
    delete originaltrackingurl_;
  }
  if (applicationtype_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationtype_;
  }
  if (this != default_instance_) {
    delete applicationid_;
    delete client_to_am_token_;
    delete app_resource_usage_;
    delete currentapplicationattemptid_;
    delete am_rm_token_;
  }
}

void ApplicationReportProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationReportProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationReportProto_descriptor_;
}

const ApplicationReportProto& ApplicationReportProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ApplicationReportProto* ApplicationReportProto::default_instance_ = NULL;

ApplicationReportProto* ApplicationReportProto::New() const {
  return new ApplicationReportProto;
}

void ApplicationReportProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applicationid()) {
      if (applicationid_ != NULL) applicationid_->::hadoop::yarn::ApplicationIdProto::Clear();
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_queue()) {
      if (queue_ != &::google::protobuf::internal::kEmptyString) {
        queue_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    rpc_port_ = 0;
    if (has_client_to_am_token()) {
      if (client_to_am_token_ != NULL) client_to_am_token_->::hadoop::common::TokenProto::Clear();
    }
    yarn_application_state_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_trackingurl()) {
      if (trackingurl_ != &::google::protobuf::internal::kEmptyString) {
        trackingurl_->clear();
      }
    }
    if (has_diagnostics()) {
      if (diagnostics_ != _default_diagnostics_) {
        diagnostics_->assign(*_default_diagnostics_);
      }
    }
    starttime_ = GOOGLE_LONGLONG(0);
    finishtime_ = GOOGLE_LONGLONG(0);
    final_application_status_ = 0;
    if (has_app_resource_usage()) {
      if (app_resource_usage_ != NULL) app_resource_usage_->::hadoop::yarn::ApplicationResourceUsageReportProto::Clear();
    }
    if (has_originaltrackingurl()) {
      if (originaltrackingurl_ != &::google::protobuf::internal::kEmptyString) {
        originaltrackingurl_->clear();
      }
    }
    if (has_currentapplicationattemptid()) {
      if (currentapplicationattemptid_ != NULL) currentapplicationattemptid_->::hadoop::yarn::ApplicationAttemptIdProto::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    progress_ = 0;
    if (has_applicationtype()) {
      if (applicationtype_ != &::google::protobuf::internal::kEmptyString) {
        applicationtype_->clear();
      }
    }
    if (has_am_rm_token()) {
      if (am_rm_token_ != NULL) am_rm_token_->::hadoop::common::TokenProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationReportProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ApplicationIdProto applicationId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applicationid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_queue;
        break;
      }

      // optional string queue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queue().data(), this->queue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }

      // optional string host = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rpc_port;
        break;
      }

      // optional int32 rpc_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpc_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpc_port_)));
          set_has_rpc_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_client_to_am_token;
        break;
      }

      // optional .hadoop.common.TokenProto client_to_am_token = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_to_am_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_to_am_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_yarn_application_state;
        break;
      }

      // optional .hadoop.yarn.YarnApplicationStateProto yarn_application_state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yarn_application_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::YarnApplicationStateProto_IsValid(value)) {
            set_yarn_application_state(static_cast< ::hadoop::yarn::YarnApplicationStateProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_trackingUrl;
        break;
      }

      // optional string trackingUrl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackingUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackingurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackingurl().data(), this->trackingurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_diagnostics;
        break;
      }

      // optional string diagnostics = 10 [default = "N/A"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diagnostics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnostics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diagnostics().data(), this->diagnostics().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_finishTime;
        break;
      }

      // optional int64 finishTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_final_application_status;
        break;
      }

      // optional .hadoop.yarn.FinalApplicationStatusProto final_application_status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_application_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::FinalApplicationStatusProto_IsValid(value)) {
            set_final_application_status(static_cast< ::hadoop::yarn::FinalApplicationStatusProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_app_resource_Usage;
        break;
      }

      // optional .hadoop.yarn.ApplicationResourceUsageReportProto app_resource_Usage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_resource_Usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_resource_usage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_originalTrackingUrl;
        break;
      }

      // optional string originalTrackingUrl = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalTrackingUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originaltrackingurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originaltrackingurl().data(), this->originaltrackingurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_currentApplicationAttemptId;
        break;
      }

      // optional .hadoop.yarn.ApplicationAttemptIdProto currentApplicationAttemptId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentApplicationAttemptId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentapplicationattemptid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_progress;
        break;
      }

      // optional float progress = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_applicationType;
        break;
      }

      // optional string applicationType = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicationType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicationtype().data(), this->applicationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_am_rm_token;
        break;
      }

      // optional .hadoop.common.TokenProto am_rm_token = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_am_rm_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_am_rm_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationReportProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ApplicationIdProto applicationId = 1;
  if (has_applicationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applicationid(), output);
  }

  // optional string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }

  // optional string queue = 3;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->queue(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string host = 5;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->host(), output);
  }

  // optional int32 rpc_port = 6;
  if (has_rpc_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rpc_port(), output);
  }

  // optional .hadoop.common.TokenProto client_to_am_token = 7;
  if (has_client_to_am_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->client_to_am_token(), output);
  }

  // optional .hadoop.yarn.YarnApplicationStateProto yarn_application_state = 8;
  if (has_yarn_application_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->yarn_application_state(), output);
  }

  // optional string trackingUrl = 9;
  if (has_trackingurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackingurl().data(), this->trackingurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->trackingurl(), output);
  }

  // optional string diagnostics = 10 [default = "N/A"];
  if (has_diagnostics()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diagnostics().data(), this->diagnostics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->diagnostics(), output);
  }

  // optional int64 startTime = 11;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->starttime(), output);
  }

  // optional int64 finishTime = 12;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->finishtime(), output);
  }

  // optional .hadoop.yarn.FinalApplicationStatusProto final_application_status = 13;
  if (has_final_application_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->final_application_status(), output);
  }

  // optional .hadoop.yarn.ApplicationResourceUsageReportProto app_resource_Usage = 14;
  if (has_app_resource_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->app_resource_usage(), output);
  }

  // optional string originalTrackingUrl = 15;
  if (has_originaltrackingurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltrackingurl().data(), this->originaltrackingurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->originaltrackingurl(), output);
  }

  // optional .hadoop.yarn.ApplicationAttemptIdProto currentApplicationAttemptId = 16;
  if (has_currentapplicationattemptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->currentapplicationattemptid(), output);
  }

  // optional float progress = 17;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->progress(), output);
  }

  // optional string applicationType = 18;
  if (has_applicationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationtype().data(), this->applicationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->applicationtype(), output);
  }

  // optional .hadoop.common.TokenProto am_rm_token = 19;
  if (has_am_rm_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->am_rm_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationReportProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ApplicationIdProto applicationId = 1;
  if (has_applicationid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applicationid(), target);
  }

  // optional string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  // optional string queue = 3;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->queue(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string host = 5;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->host(), target);
  }

  // optional int32 rpc_port = 6;
  if (has_rpc_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rpc_port(), target);
  }

  // optional .hadoop.common.TokenProto client_to_am_token = 7;
  if (has_client_to_am_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->client_to_am_token(), target);
  }

  // optional .hadoop.yarn.YarnApplicationStateProto yarn_application_state = 8;
  if (has_yarn_application_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->yarn_application_state(), target);
  }

  // optional string trackingUrl = 9;
  if (has_trackingurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackingurl().data(), this->trackingurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->trackingurl(), target);
  }

  // optional string diagnostics = 10 [default = "N/A"];
  if (has_diagnostics()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diagnostics().data(), this->diagnostics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->diagnostics(), target);
  }

  // optional int64 startTime = 11;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->starttime(), target);
  }

  // optional int64 finishTime = 12;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->finishtime(), target);
  }

  // optional .hadoop.yarn.FinalApplicationStatusProto final_application_status = 13;
  if (has_final_application_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->final_application_status(), target);
  }

  // optional .hadoop.yarn.ApplicationResourceUsageReportProto app_resource_Usage = 14;
  if (has_app_resource_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->app_resource_usage(), target);
  }

  // optional string originalTrackingUrl = 15;
  if (has_originaltrackingurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltrackingurl().data(), this->originaltrackingurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->originaltrackingurl(), target);
  }

  // optional .hadoop.yarn.ApplicationAttemptIdProto currentApplicationAttemptId = 16;
  if (has_currentapplicationattemptid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->currentapplicationattemptid(), target);
  }

  // optional float progress = 17;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->progress(), target);
  }

  // optional string applicationType = 18;
  if (has_applicationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationtype().data(), this->applicationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->applicationtype(), target);
  }

  // optional .hadoop.common.TokenProto am_rm_token = 19;
  if (has_am_rm_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->am_rm_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationReportProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ApplicationIdProto applicationId = 1;
    if (has_applicationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applicationid());
    }

    // optional string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string queue = 3;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queue());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string host = 5;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 rpc_port = 6;
    if (has_rpc_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpc_port());
    }

    // optional .hadoop.common.TokenProto client_to_am_token = 7;
    if (has_client_to_am_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_to_am_token());
    }

    // optional .hadoop.yarn.YarnApplicationStateProto yarn_application_state = 8;
    if (has_yarn_application_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->yarn_application_state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string trackingUrl = 9;
    if (has_trackingurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackingurl());
    }

    // optional string diagnostics = 10 [default = "N/A"];
    if (has_diagnostics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diagnostics());
    }

    // optional int64 startTime = 11;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 finishTime = 12;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime());
    }

    // optional .hadoop.yarn.FinalApplicationStatusProto final_application_status = 13;
    if (has_final_application_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->final_application_status());
    }

    // optional .hadoop.yarn.ApplicationResourceUsageReportProto app_resource_Usage = 14;
    if (has_app_resource_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_resource_usage());
    }

    // optional string originalTrackingUrl = 15;
    if (has_originaltrackingurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originaltrackingurl());
    }

    // optional .hadoop.yarn.ApplicationAttemptIdProto currentApplicationAttemptId = 16;
    if (has_currentapplicationattemptid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentapplicationattemptid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float progress = 17;
    if (has_progress()) {
      total_size += 2 + 4;
    }

    // optional string applicationType = 18;
    if (has_applicationtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationtype());
    }

    // optional .hadoop.common.TokenProto am_rm_token = 19;
    if (has_am_rm_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->am_rm_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationReportProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationReportProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationReportProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationReportProto::MergeFrom(const ApplicationReportProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applicationid()) {
      mutable_applicationid()->::hadoop::yarn::ApplicationIdProto::MergeFrom(from.applicationid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_queue()) {
      set_queue(from.queue());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_rpc_port()) {
      set_rpc_port(from.rpc_port());
    }
    if (from.has_client_to_am_token()) {
      mutable_client_to_am_token()->::hadoop::common::TokenProto::MergeFrom(from.client_to_am_token());
    }
    if (from.has_yarn_application_state()) {
      set_yarn_application_state(from.yarn_application_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trackingurl()) {
      set_trackingurl(from.trackingurl());
    }
    if (from.has_diagnostics()) {
      set_diagnostics(from.diagnostics());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_final_application_status()) {
      set_final_application_status(from.final_application_status());
    }
    if (from.has_app_resource_usage()) {
      mutable_app_resource_usage()->::hadoop::yarn::ApplicationResourceUsageReportProto::MergeFrom(from.app_resource_usage());
    }
    if (from.has_originaltrackingurl()) {
      set_originaltrackingurl(from.originaltrackingurl());
    }
    if (from.has_currentapplicationattemptid()) {
      mutable_currentapplicationattemptid()->::hadoop::yarn::ApplicationAttemptIdProto::MergeFrom(from.currentapplicationattemptid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_applicationtype()) {
      set_applicationtype(from.applicationtype());
    }
    if (from.has_am_rm_token()) {
      mutable_am_rm_token()->::hadoop::common::TokenProto::MergeFrom(from.am_rm_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationReportProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationReportProto::CopyFrom(const ApplicationReportProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationReportProto::IsInitialized() const {

  if (has_client_to_am_token()) {
    if (!this->client_to_am_token().IsInitialized()) return false;
  }
  if (has_am_rm_token()) {
    if (!this->am_rm_token().IsInitialized()) return false;
  }
  return true;
}

void ApplicationReportProto::Swap(ApplicationReportProto* other) {
  if (other != this) {
    std::swap(applicationid_, other->applicationid_);
    std::swap(user_, other->user_);
    std::swap(queue_, other->queue_);
    std::swap(name_, other->name_);
    std::swap(host_, other->host_);
    std::swap(rpc_port_, other->rpc_port_);
    std::swap(client_to_am_token_, other->client_to_am_token_);
    std::swap(yarn_application_state_, other->yarn_application_state_);
    std::swap(trackingurl_, other->trackingurl_);
    std::swap(diagnostics_, other->diagnostics_);
    std::swap(starttime_, other->starttime_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(final_application_status_, other->final_application_status_);
    std::swap(app_resource_usage_, other->app_resource_usage_);
    std::swap(originaltrackingurl_, other->originaltrackingurl_);
    std::swap(currentapplicationattemptid_, other->currentapplicationattemptid_);
    std::swap(progress_, other->progress_);
    std::swap(applicationtype_, other->applicationtype_);
    std::swap(am_rm_token_, other->am_rm_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationReportProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationReportProto_descriptor_;
  metadata.reflection = ApplicationReportProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeIdProto::kHostFieldNumber;
const int NodeIdProto::kPortFieldNumber;
#endif  // !_MSC_VER

NodeIdProto::NodeIdProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeIdProto::InitAsDefaultInstance() {
}

NodeIdProto::NodeIdProto(const NodeIdProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeIdProto::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeIdProto::~NodeIdProto() {
  SharedDtor();
}

void NodeIdProto::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void NodeIdProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeIdProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeIdProto_descriptor_;
}

const NodeIdProto& NodeIdProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

NodeIdProto* NodeIdProto::default_instance_ = NULL;

NodeIdProto* NodeIdProto::New() const {
  return new NodeIdProto;
}

void NodeIdProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeIdProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeIdProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeIdProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeIdProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeIdProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeIdProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeIdProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeIdProto::MergeFrom(const NodeIdProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeIdProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeIdProto::CopyFrom(const NodeIdProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeIdProto::IsInitialized() const {

  return true;
}

void NodeIdProto::Swap(NodeIdProto* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeIdProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeIdProto_descriptor_;
  metadata.reflection = NodeIdProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeReportProto::kNodeIdFieldNumber;
const int NodeReportProto::kHttpAddressFieldNumber;
const int NodeReportProto::kRackNameFieldNumber;
const int NodeReportProto::kUsedFieldNumber;
const int NodeReportProto::kCapabilityFieldNumber;
const int NodeReportProto::kNumContainersFieldNumber;
const int NodeReportProto::kNodeStateFieldNumber;
const int NodeReportProto::kHealthReportFieldNumber;
const int NodeReportProto::kLastHealthReportTimeFieldNumber;
#endif  // !_MSC_VER

NodeReportProto::NodeReportProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeReportProto::InitAsDefaultInstance() {
  nodeid_ = const_cast< ::hadoop::yarn::NodeIdProto*>(&::hadoop::yarn::NodeIdProto::default_instance());
  used_ = const_cast< ::hadoop::yarn::ResourceProto*>(&::hadoop::yarn::ResourceProto::default_instance());
  capability_ = const_cast< ::hadoop::yarn::ResourceProto*>(&::hadoop::yarn::ResourceProto::default_instance());
}

NodeReportProto::NodeReportProto(const NodeReportProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeReportProto::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = NULL;
  httpaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  used_ = NULL;
  capability_ = NULL;
  numcontainers_ = 0;
  node_state_ = 1;
  health_report_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_health_report_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeReportProto::~NodeReportProto() {
  SharedDtor();
}

void NodeReportProto::SharedDtor() {
  if (httpaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete httpaddress_;
  }
  if (rackname_ != &::google::protobuf::internal::kEmptyString) {
    delete rackname_;
  }
  if (health_report_ != &::google::protobuf::internal::kEmptyString) {
    delete health_report_;
  }
  if (this != default_instance_) {
    delete nodeid_;
    delete used_;
    delete capability_;
  }
}

void NodeReportProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeReportProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeReportProto_descriptor_;
}

const NodeReportProto& NodeReportProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

NodeReportProto* NodeReportProto::default_instance_ = NULL;

NodeReportProto* NodeReportProto::New() const {
  return new NodeReportProto;
}

void NodeReportProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodeid()) {
      if (nodeid_ != NULL) nodeid_->::hadoop::yarn::NodeIdProto::Clear();
    }
    if (has_httpaddress()) {
      if (httpaddress_ != &::google::protobuf::internal::kEmptyString) {
        httpaddress_->clear();
      }
    }
    if (has_rackname()) {
      if (rackname_ != &::google::protobuf::internal::kEmptyString) {
        rackname_->clear();
      }
    }
    if (has_used()) {
      if (used_ != NULL) used_->::hadoop::yarn::ResourceProto::Clear();
    }
    if (has_capability()) {
      if (capability_ != NULL) capability_->::hadoop::yarn::ResourceProto::Clear();
    }
    numcontainers_ = 0;
    node_state_ = 1;
    if (has_health_report()) {
      if (health_report_ != &::google::protobuf::internal::kEmptyString) {
        health_report_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_health_report_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeReportProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.NodeIdProto nodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_httpAddress;
        break;
      }

      // optional string httpAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_httpAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_httpaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->httpaddress().data(), this->httpaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rackName;
        break;
      }

      // optional string rackName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rackName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rackname().data(), this->rackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_used;
        break;
      }

      // optional .hadoop.yarn.ResourceProto used = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_used:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_used()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_capability;
        break;
      }

      // optional .hadoop.yarn.ResourceProto capability = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capability()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numContainers;
        break;
      }

      // optional int32 numContainers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numContainers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numcontainers_)));
          set_has_numcontainers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_node_state;
        break;
      }

      // optional .hadoop.yarn.NodeStateProto node_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::NodeStateProto_IsValid(value)) {
            set_node_state(static_cast< ::hadoop::yarn::NodeStateProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_health_report;
        break;
      }

      // optional string health_report = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_health_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_health_report()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->health_report().data(), this->health_report().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_health_report_time;
        break;
      }

      // optional int64 last_health_report_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_health_report_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_health_report_time_)));
          set_has_last_health_report_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeReportProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.NodeIdProto nodeId = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodeid(), output);
  }

  // optional string httpAddress = 2;
  if (has_httpaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->httpaddress().data(), this->httpaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->httpaddress(), output);
  }

  // optional string rackName = 3;
  if (has_rackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rackname().data(), this->rackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rackname(), output);
  }

  // optional .hadoop.yarn.ResourceProto used = 4;
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->used(), output);
  }

  // optional .hadoop.yarn.ResourceProto capability = 5;
  if (has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->capability(), output);
  }

  // optional int32 numContainers = 6;
  if (has_numcontainers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->numcontainers(), output);
  }

  // optional .hadoop.yarn.NodeStateProto node_state = 7;
  if (has_node_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->node_state(), output);
  }

  // optional string health_report = 8;
  if (has_health_report()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->health_report().data(), this->health_report().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->health_report(), output);
  }

  // optional int64 last_health_report_time = 9;
  if (has_last_health_report_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->last_health_report_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeReportProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.NodeIdProto nodeId = 1;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodeid(), target);
  }

  // optional string httpAddress = 2;
  if (has_httpaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->httpaddress().data(), this->httpaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->httpaddress(), target);
  }

  // optional string rackName = 3;
  if (has_rackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rackname().data(), this->rackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rackname(), target);
  }

  // optional .hadoop.yarn.ResourceProto used = 4;
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->used(), target);
  }

  // optional .hadoop.yarn.ResourceProto capability = 5;
  if (has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->capability(), target);
  }

  // optional int32 numContainers = 6;
  if (has_numcontainers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->numcontainers(), target);
  }

  // optional .hadoop.yarn.NodeStateProto node_state = 7;
  if (has_node_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->node_state(), target);
  }

  // optional string health_report = 8;
  if (has_health_report()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->health_report().data(), this->health_report().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->health_report(), target);
  }

  // optional int64 last_health_report_time = 9;
  if (has_last_health_report_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->last_health_report_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeReportProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.NodeIdProto nodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodeid());
    }

    // optional string httpAddress = 2;
    if (has_httpaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->httpaddress());
    }

    // optional string rackName = 3;
    if (has_rackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rackname());
    }

    // optional .hadoop.yarn.ResourceProto used = 4;
    if (has_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->used());
    }

    // optional .hadoop.yarn.ResourceProto capability = 5;
    if (has_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capability());
    }

    // optional int32 numContainers = 6;
    if (has_numcontainers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numcontainers());
    }

    // optional .hadoop.yarn.NodeStateProto node_state = 7;
    if (has_node_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_state());
    }

    // optional string health_report = 8;
    if (has_health_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->health_report());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 last_health_report_time = 9;
    if (has_last_health_report_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_health_report_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeReportProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeReportProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeReportProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeReportProto::MergeFrom(const NodeReportProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid()) {
      mutable_nodeid()->::hadoop::yarn::NodeIdProto::MergeFrom(from.nodeid());
    }
    if (from.has_httpaddress()) {
      set_httpaddress(from.httpaddress());
    }
    if (from.has_rackname()) {
      set_rackname(from.rackname());
    }
    if (from.has_used()) {
      mutable_used()->::hadoop::yarn::ResourceProto::MergeFrom(from.used());
    }
    if (from.has_capability()) {
      mutable_capability()->::hadoop::yarn::ResourceProto::MergeFrom(from.capability());
    }
    if (from.has_numcontainers()) {
      set_numcontainers(from.numcontainers());
    }
    if (from.has_node_state()) {
      set_node_state(from.node_state());
    }
    if (from.has_health_report()) {
      set_health_report(from.health_report());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_health_report_time()) {
      set_last_health_report_time(from.last_health_report_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeReportProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeReportProto::CopyFrom(const NodeReportProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReportProto::IsInitialized() const {

  return true;
}

void NodeReportProto::Swap(NodeReportProto* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(httpaddress_, other->httpaddress_);
    std::swap(rackname_, other->rackname_);
    std::swap(used_, other->used_);
    std::swap(capability_, other->capability_);
    std::swap(numcontainers_, other->numcontainers_);
    std::swap(node_state_, other->node_state_);
    std::swap(health_report_, other->health_report_);
    std::swap(last_health_report_time_, other->last_health_report_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeReportProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeReportProto_descriptor_;
  metadata.reflection = NodeReportProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceRequestProto::kPriorityFieldNumber;
const int ResourceRequestProto::kResourceNameFieldNumber;
const int ResourceRequestProto::kCapabilityFieldNumber;
const int ResourceRequestProto::kNumContainersFieldNumber;
const int ResourceRequestProto::kRelaxLocalityFieldNumber;
#endif  // !_MSC_VER

ResourceRequestProto::ResourceRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceRequestProto::InitAsDefaultInstance() {
  priority_ = const_cast< ::hadoop::yarn::PriorityProto*>(&::hadoop::yarn::PriorityProto::default_instance());
  capability_ = const_cast< ::hadoop::yarn::ResourceProto*>(&::hadoop::yarn::ResourceProto::default_instance());
}

ResourceRequestProto::ResourceRequestProto(const ResourceRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceRequestProto::SharedCtor() {
  _cached_size_ = 0;
  priority_ = NULL;
  resource_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capability_ = NULL;
  num_containers_ = 0;
  relax_locality_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceRequestProto::~ResourceRequestProto() {
  SharedDtor();
}

void ResourceRequestProto::SharedDtor() {
  if (resource_name_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_name_;
  }
  if (this != default_instance_) {
    delete priority_;
    delete capability_;
  }
}

void ResourceRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceRequestProto_descriptor_;
}

const ResourceRequestProto& ResourceRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ResourceRequestProto* ResourceRequestProto::default_instance_ = NULL;

ResourceRequestProto* ResourceRequestProto::New() const {
  return new ResourceRequestProto;
}

void ResourceRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_priority()) {
      if (priority_ != NULL) priority_->::hadoop::yarn::PriorityProto::Clear();
    }
    if (has_resource_name()) {
      if (resource_name_ != &::google::protobuf::internal::kEmptyString) {
        resource_name_->clear();
      }
    }
    if (has_capability()) {
      if (capability_ != NULL) capability_->::hadoop::yarn::ResourceProto::Clear();
    }
    num_containers_ = 0;
    relax_locality_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.PriorityProto priority = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priority()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource_name;
        break;
      }

      // optional string resource_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource_name().data(), this->resource_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_capability;
        break;
      }

      // optional .hadoop.yarn.ResourceProto capability = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capability()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_containers;
        break;
      }

      // optional int32 num_containers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_containers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_containers_)));
          set_has_num_containers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_relax_locality;
        break;
      }

      // optional bool relax_locality = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relax_locality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relax_locality_)));
          set_has_relax_locality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.PriorityProto priority = 1;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->priority(), output);
  }

  // optional string resource_name = 2;
  if (has_resource_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource_name().data(), this->resource_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource_name(), output);
  }

  // optional .hadoop.yarn.ResourceProto capability = 3;
  if (has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->capability(), output);
  }

  // optional int32 num_containers = 4;
  if (has_num_containers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_containers(), output);
  }

  // optional bool relax_locality = 5 [default = true];
  if (has_relax_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->relax_locality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.PriorityProto priority = 1;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->priority(), target);
  }

  // optional string resource_name = 2;
  if (has_resource_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource_name().data(), this->resource_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource_name(), target);
  }

  // optional .hadoop.yarn.ResourceProto capability = 3;
  if (has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->capability(), target);
  }

  // optional int32 num_containers = 4;
  if (has_num_containers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_containers(), target);
  }

  // optional bool relax_locality = 5 [default = true];
  if (has_relax_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->relax_locality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.PriorityProto priority = 1;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priority());
    }

    // optional string resource_name = 2;
    if (has_resource_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_name());
    }

    // optional .hadoop.yarn.ResourceProto capability = 3;
    if (has_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capability());
    }

    // optional int32 num_containers = 4;
    if (has_num_containers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_containers());
    }

    // optional bool relax_locality = 5 [default = true];
    if (has_relax_locality()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceRequestProto::MergeFrom(const ResourceRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_priority()) {
      mutable_priority()->::hadoop::yarn::PriorityProto::MergeFrom(from.priority());
    }
    if (from.has_resource_name()) {
      set_resource_name(from.resource_name());
    }
    if (from.has_capability()) {
      mutable_capability()->::hadoop::yarn::ResourceProto::MergeFrom(from.capability());
    }
    if (from.has_num_containers()) {
      set_num_containers(from.num_containers());
    }
    if (from.has_relax_locality()) {
      set_relax_locality(from.relax_locality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceRequestProto::CopyFrom(const ResourceRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceRequestProto::IsInitialized() const {

  return true;
}

void ResourceRequestProto::Swap(ResourceRequestProto* other) {
  if (other != this) {
    std::swap(priority_, other->priority_);
    std::swap(resource_name_, other->resource_name_);
    std::swap(capability_, other->capability_);
    std::swap(num_containers_, other->num_containers_);
    std::swap(relax_locality_, other->relax_locality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceRequestProto_descriptor_;
  metadata.reflection = ResourceRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreemptionMessageProto::kStrictContractFieldNumber;
const int PreemptionMessageProto::kContractFieldNumber;
#endif  // !_MSC_VER

PreemptionMessageProto::PreemptionMessageProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreemptionMessageProto::InitAsDefaultInstance() {
  strictcontract_ = const_cast< ::hadoop::yarn::StrictPreemptionContractProto*>(&::hadoop::yarn::StrictPreemptionContractProto::default_instance());
  contract_ = const_cast< ::hadoop::yarn::PreemptionContractProto*>(&::hadoop::yarn::PreemptionContractProto::default_instance());
}

PreemptionMessageProto::PreemptionMessageProto(const PreemptionMessageProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreemptionMessageProto::SharedCtor() {
  _cached_size_ = 0;
  strictcontract_ = NULL;
  contract_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreemptionMessageProto::~PreemptionMessageProto() {
  SharedDtor();
}

void PreemptionMessageProto::SharedDtor() {
  if (this != default_instance_) {
    delete strictcontract_;
    delete contract_;
  }
}

void PreemptionMessageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreemptionMessageProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreemptionMessageProto_descriptor_;
}

const PreemptionMessageProto& PreemptionMessageProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

PreemptionMessageProto* PreemptionMessageProto::default_instance_ = NULL;

PreemptionMessageProto* PreemptionMessageProto::New() const {
  return new PreemptionMessageProto;
}

void PreemptionMessageProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strictcontract()) {
      if (strictcontract_ != NULL) strictcontract_->::hadoop::yarn::StrictPreemptionContractProto::Clear();
    }
    if (has_contract()) {
      if (contract_ != NULL) contract_->::hadoop::yarn::PreemptionContractProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreemptionMessageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.StrictPreemptionContractProto strictContract = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strictcontract()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // optional .hadoop.yarn.PreemptionContractProto contract = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contract()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreemptionMessageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.StrictPreemptionContractProto strictContract = 1;
  if (has_strictcontract()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strictcontract(), output);
  }

  // optional .hadoop.yarn.PreemptionContractProto contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contract(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreemptionMessageProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.StrictPreemptionContractProto strictContract = 1;
  if (has_strictcontract()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strictcontract(), target);
  }

  // optional .hadoop.yarn.PreemptionContractProto contract = 2;
  if (has_contract()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contract(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreemptionMessageProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.StrictPreemptionContractProto strictContract = 1;
    if (has_strictcontract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strictcontract());
    }

    // optional .hadoop.yarn.PreemptionContractProto contract = 2;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contract());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreemptionMessageProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreemptionMessageProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreemptionMessageProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreemptionMessageProto::MergeFrom(const PreemptionMessageProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strictcontract()) {
      mutable_strictcontract()->::hadoop::yarn::StrictPreemptionContractProto::MergeFrom(from.strictcontract());
    }
    if (from.has_contract()) {
      mutable_contract()->::hadoop::yarn::PreemptionContractProto::MergeFrom(from.contract());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreemptionMessageProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreemptionMessageProto::CopyFrom(const PreemptionMessageProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreemptionMessageProto::IsInitialized() const {

  return true;
}

void PreemptionMessageProto::Swap(PreemptionMessageProto* other) {
  if (other != this) {
    std::swap(strictcontract_, other->strictcontract_);
    std::swap(contract_, other->contract_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreemptionMessageProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreemptionMessageProto_descriptor_;
  metadata.reflection = PreemptionMessageProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrictPreemptionContractProto::kContainerFieldNumber;
#endif  // !_MSC_VER

StrictPreemptionContractProto::StrictPreemptionContractProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrictPreemptionContractProto::InitAsDefaultInstance() {
}

StrictPreemptionContractProto::StrictPreemptionContractProto(const StrictPreemptionContractProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrictPreemptionContractProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrictPreemptionContractProto::~StrictPreemptionContractProto() {
  SharedDtor();
}

void StrictPreemptionContractProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrictPreemptionContractProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrictPreemptionContractProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrictPreemptionContractProto_descriptor_;
}

const StrictPreemptionContractProto& StrictPreemptionContractProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

StrictPreemptionContractProto* StrictPreemptionContractProto::default_instance_ = NULL;

StrictPreemptionContractProto* StrictPreemptionContractProto::New() const {
  return new StrictPreemptionContractProto;
}

void StrictPreemptionContractProto::Clear() {
  container_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrictPreemptionContractProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hadoop.yarn.PreemptionContainerProto container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_container;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrictPreemptionContractProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hadoop.yarn.PreemptionContainerProto container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrictPreemptionContractProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hadoop.yarn.PreemptionContainerProto container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrictPreemptionContractProto::ByteSize() const {
  int total_size = 0;

  // repeated .hadoop.yarn.PreemptionContainerProto container = 1;
  total_size += 1 * this->container_size();
  for (int i = 0; i < this->container_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->container(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrictPreemptionContractProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrictPreemptionContractProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrictPreemptionContractProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrictPreemptionContractProto::MergeFrom(const StrictPreemptionContractProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  container_.MergeFrom(from.container_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrictPreemptionContractProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrictPreemptionContractProto::CopyFrom(const StrictPreemptionContractProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrictPreemptionContractProto::IsInitialized() const {

  return true;
}

void StrictPreemptionContractProto::Swap(StrictPreemptionContractProto* other) {
  if (other != this) {
    container_.Swap(&other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrictPreemptionContractProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrictPreemptionContractProto_descriptor_;
  metadata.reflection = StrictPreemptionContractProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreemptionContractProto::kResourceFieldNumber;
const int PreemptionContractProto::kContainerFieldNumber;
#endif  // !_MSC_VER

PreemptionContractProto::PreemptionContractProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreemptionContractProto::InitAsDefaultInstance() {
}

PreemptionContractProto::PreemptionContractProto(const PreemptionContractProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreemptionContractProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreemptionContractProto::~PreemptionContractProto() {
  SharedDtor();
}

void PreemptionContractProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PreemptionContractProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreemptionContractProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreemptionContractProto_descriptor_;
}

const PreemptionContractProto& PreemptionContractProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

PreemptionContractProto* PreemptionContractProto::default_instance_ = NULL;

PreemptionContractProto* PreemptionContractProto::New() const {
  return new PreemptionContractProto;
}

void PreemptionContractProto::Clear() {
  resource_.Clear();
  container_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreemptionContractProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hadoop.yarn.PreemptionResourceRequestProto resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resource;
        if (input->ExpectTag(18)) goto parse_container;
        break;
      }

      // repeated .hadoop.yarn.PreemptionContainerProto container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreemptionContractProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hadoop.yarn.PreemptionResourceRequestProto resource = 1;
  for (int i = 0; i < this->resource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resource(i), output);
  }

  // repeated .hadoop.yarn.PreemptionContainerProto container = 2;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreemptionContractProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hadoop.yarn.PreemptionResourceRequestProto resource = 1;
  for (int i = 0; i < this->resource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource(i), target);
  }

  // repeated .hadoop.yarn.PreemptionContainerProto container = 2;
  for (int i = 0; i < this->container_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreemptionContractProto::ByteSize() const {
  int total_size = 0;

  // repeated .hadoop.yarn.PreemptionResourceRequestProto resource = 1;
  total_size += 1 * this->resource_size();
  for (int i = 0; i < this->resource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource(i));
  }

  // repeated .hadoop.yarn.PreemptionContainerProto container = 2;
  total_size += 1 * this->container_size();
  for (int i = 0; i < this->container_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->container(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreemptionContractProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreemptionContractProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreemptionContractProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreemptionContractProto::MergeFrom(const PreemptionContractProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_.MergeFrom(from.resource_);
  container_.MergeFrom(from.container_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreemptionContractProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreemptionContractProto::CopyFrom(const PreemptionContractProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreemptionContractProto::IsInitialized() const {

  return true;
}

void PreemptionContractProto::Swap(PreemptionContractProto* other) {
  if (other != this) {
    resource_.Swap(&other->resource_);
    container_.Swap(&other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreemptionContractProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreemptionContractProto_descriptor_;
  metadata.reflection = PreemptionContractProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreemptionContainerProto::kIdFieldNumber;
#endif  // !_MSC_VER

PreemptionContainerProto::PreemptionContainerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreemptionContainerProto::InitAsDefaultInstance() {
  id_ = const_cast< ::hadoop::yarn::ContainerIdProto*>(&::hadoop::yarn::ContainerIdProto::default_instance());
}

PreemptionContainerProto::PreemptionContainerProto(const PreemptionContainerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreemptionContainerProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreemptionContainerProto::~PreemptionContainerProto() {
  SharedDtor();
}

void PreemptionContainerProto::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void PreemptionContainerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreemptionContainerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreemptionContainerProto_descriptor_;
}

const PreemptionContainerProto& PreemptionContainerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

PreemptionContainerProto* PreemptionContainerProto::default_instance_ = NULL;

PreemptionContainerProto* PreemptionContainerProto::New() const {
  return new PreemptionContainerProto;
}

void PreemptionContainerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::hadoop::yarn::ContainerIdProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreemptionContainerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ContainerIdProto id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreemptionContainerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ContainerIdProto id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreemptionContainerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ContainerIdProto id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreemptionContainerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ContainerIdProto id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreemptionContainerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreemptionContainerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreemptionContainerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreemptionContainerProto::MergeFrom(const PreemptionContainerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hadoop::yarn::ContainerIdProto::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreemptionContainerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreemptionContainerProto::CopyFrom(const PreemptionContainerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreemptionContainerProto::IsInitialized() const {

  return true;
}

void PreemptionContainerProto::Swap(PreemptionContainerProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreemptionContainerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreemptionContainerProto_descriptor_;
  metadata.reflection = PreemptionContainerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreemptionResourceRequestProto::kResourceFieldNumber;
#endif  // !_MSC_VER

PreemptionResourceRequestProto::PreemptionResourceRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreemptionResourceRequestProto::InitAsDefaultInstance() {
  resource_ = const_cast< ::hadoop::yarn::ResourceRequestProto*>(&::hadoop::yarn::ResourceRequestProto::default_instance());
}

PreemptionResourceRequestProto::PreemptionResourceRequestProto(const PreemptionResourceRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreemptionResourceRequestProto::SharedCtor() {
  _cached_size_ = 0;
  resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreemptionResourceRequestProto::~PreemptionResourceRequestProto() {
  SharedDtor();
}

void PreemptionResourceRequestProto::SharedDtor() {
  if (this != default_instance_) {
    delete resource_;
  }
}

void PreemptionResourceRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreemptionResourceRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreemptionResourceRequestProto_descriptor_;
}

const PreemptionResourceRequestProto& PreemptionResourceRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

PreemptionResourceRequestProto* PreemptionResourceRequestProto::default_instance_ = NULL;

PreemptionResourceRequestProto* PreemptionResourceRequestProto::New() const {
  return new PreemptionResourceRequestProto;
}

void PreemptionResourceRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_resource()) {
      if (resource_ != NULL) resource_->::hadoop::yarn::ResourceRequestProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreemptionResourceRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ResourceRequestProto resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreemptionResourceRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ResourceRequestProto resource = 1;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreemptionResourceRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ResourceRequestProto resource = 1;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreemptionResourceRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ResourceRequestProto resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreemptionResourceRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreemptionResourceRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreemptionResourceRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreemptionResourceRequestProto::MergeFrom(const PreemptionResourceRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource()) {
      mutable_resource()->::hadoop::yarn::ResourceRequestProto::MergeFrom(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreemptionResourceRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreemptionResourceRequestProto::CopyFrom(const PreemptionResourceRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreemptionResourceRequestProto::IsInitialized() const {

  return true;
}

void PreemptionResourceRequestProto::Swap(PreemptionResourceRequestProto* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreemptionResourceRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreemptionResourceRequestProto_descriptor_;
  metadata.reflection = PreemptionResourceRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceBlacklistRequestProto::kBlacklistAdditionsFieldNumber;
const int ResourceBlacklistRequestProto::kBlacklistRemovalsFieldNumber;
#endif  // !_MSC_VER

ResourceBlacklistRequestProto::ResourceBlacklistRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceBlacklistRequestProto::InitAsDefaultInstance() {
}

ResourceBlacklistRequestProto::ResourceBlacklistRequestProto(const ResourceBlacklistRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceBlacklistRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceBlacklistRequestProto::~ResourceBlacklistRequestProto() {
  SharedDtor();
}

void ResourceBlacklistRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceBlacklistRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceBlacklistRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceBlacklistRequestProto_descriptor_;
}

const ResourceBlacklistRequestProto& ResourceBlacklistRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ResourceBlacklistRequestProto* ResourceBlacklistRequestProto::default_instance_ = NULL;

ResourceBlacklistRequestProto* ResourceBlacklistRequestProto::New() const {
  return new ResourceBlacklistRequestProto;
}

void ResourceBlacklistRequestProto::Clear() {
  blacklist_additions_.Clear();
  blacklist_removals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceBlacklistRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string blacklist_additions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blacklist_additions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blacklist_additions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->blacklist_additions(this->blacklist_additions_size() - 1).data(),
            this->blacklist_additions(this->blacklist_additions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blacklist_additions;
        if (input->ExpectTag(18)) goto parse_blacklist_removals;
        break;
      }

      // repeated string blacklist_removals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blacklist_removals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blacklist_removals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->blacklist_removals(this->blacklist_removals_size() - 1).data(),
            this->blacklist_removals(this->blacklist_removals_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blacklist_removals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceBlacklistRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string blacklist_additions = 1;
  for (int i = 0; i < this->blacklist_additions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->blacklist_additions(i).data(), this->blacklist_additions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->blacklist_additions(i), output);
  }

  // repeated string blacklist_removals = 2;
  for (int i = 0; i < this->blacklist_removals_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->blacklist_removals(i).data(), this->blacklist_removals(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->blacklist_removals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceBlacklistRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string blacklist_additions = 1;
  for (int i = 0; i < this->blacklist_additions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blacklist_additions(i).data(), this->blacklist_additions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->blacklist_additions(i), target);
  }

  // repeated string blacklist_removals = 2;
  for (int i = 0; i < this->blacklist_removals_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blacklist_removals(i).data(), this->blacklist_removals(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->blacklist_removals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceBlacklistRequestProto::ByteSize() const {
  int total_size = 0;

  // repeated string blacklist_additions = 1;
  total_size += 1 * this->blacklist_additions_size();
  for (int i = 0; i < this->blacklist_additions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blacklist_additions(i));
  }

  // repeated string blacklist_removals = 2;
  total_size += 1 * this->blacklist_removals_size();
  for (int i = 0; i < this->blacklist_removals_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blacklist_removals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceBlacklistRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceBlacklistRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceBlacklistRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceBlacklistRequestProto::MergeFrom(const ResourceBlacklistRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  blacklist_additions_.MergeFrom(from.blacklist_additions_);
  blacklist_removals_.MergeFrom(from.blacklist_removals_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceBlacklistRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceBlacklistRequestProto::CopyFrom(const ResourceBlacklistRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceBlacklistRequestProto::IsInitialized() const {

  return true;
}

void ResourceBlacklistRequestProto::Swap(ResourceBlacklistRequestProto* other) {
  if (other != this) {
    blacklist_additions_.Swap(&other->blacklist_additions_);
    blacklist_removals_.Swap(&other->blacklist_removals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceBlacklistRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceBlacklistRequestProto_descriptor_;
  metadata.reflection = ResourceBlacklistRequestProto_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ApplicationSubmissionContextProto::_default_application_name_ = NULL;
::std::string* ApplicationSubmissionContextProto::_default_queue_ = NULL;
::std::string* ApplicationSubmissionContextProto::_default_applicationtype_ = NULL;
#ifndef _MSC_VER
const int ApplicationSubmissionContextProto::kApplicationIdFieldNumber;
const int ApplicationSubmissionContextProto::kApplicationNameFieldNumber;
const int ApplicationSubmissionContextProto::kQueueFieldNumber;
const int ApplicationSubmissionContextProto::kPriorityFieldNumber;
const int ApplicationSubmissionContextProto::kAmContainerSpecFieldNumber;
const int ApplicationSubmissionContextProto::kCancelTokensWhenCompleteFieldNumber;
const int ApplicationSubmissionContextProto::kUnmanagedAmFieldNumber;
const int ApplicationSubmissionContextProto::kMaxAppAttemptsFieldNumber;
const int ApplicationSubmissionContextProto::kResourceFieldNumber;
const int ApplicationSubmissionContextProto::kApplicationTypeFieldNumber;
#endif  // !_MSC_VER

ApplicationSubmissionContextProto::ApplicationSubmissionContextProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationSubmissionContextProto::InitAsDefaultInstance() {
  application_id_ = const_cast< ::hadoop::yarn::ApplicationIdProto*>(&::hadoop::yarn::ApplicationIdProto::default_instance());
  priority_ = const_cast< ::hadoop::yarn::PriorityProto*>(&::hadoop::yarn::PriorityProto::default_instance());
  am_container_spec_ = const_cast< ::hadoop::yarn::ContainerLaunchContextProto*>(&::hadoop::yarn::ContainerLaunchContextProto::default_instance());
  resource_ = const_cast< ::hadoop::yarn::ResourceProto*>(&::hadoop::yarn::ResourceProto::default_instance());
}

ApplicationSubmissionContextProto::ApplicationSubmissionContextProto(const ApplicationSubmissionContextProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationSubmissionContextProto::SharedCtor() {
  _cached_size_ = 0;
  application_id_ = NULL;
  application_name_ = const_cast< ::std::string*>(_default_application_name_);
  queue_ = const_cast< ::std::string*>(_default_queue_);
  priority_ = NULL;
  am_container_spec_ = NULL;
  cancel_tokens_when_complete_ = true;
  unmanaged_am_ = false;
  maxappattempts_ = 0;
  resource_ = NULL;
  applicationtype_ = const_cast< ::std::string*>(_default_applicationtype_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationSubmissionContextProto::~ApplicationSubmissionContextProto() {
  SharedDtor();
}

void ApplicationSubmissionContextProto::SharedDtor() {
  if (application_name_ != _default_application_name_) {
    delete application_name_;
  }
  if (queue_ != _default_queue_) {
    delete queue_;
  }
  if (applicationtype_ != _default_applicationtype_) {
    delete applicationtype_;
  }
  if (this != default_instance_) {
    delete application_id_;
    delete priority_;
    delete am_container_spec_;
    delete resource_;
  }
}

void ApplicationSubmissionContextProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationSubmissionContextProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationSubmissionContextProto_descriptor_;
}

const ApplicationSubmissionContextProto& ApplicationSubmissionContextProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ApplicationSubmissionContextProto* ApplicationSubmissionContextProto::default_instance_ = NULL;

ApplicationSubmissionContextProto* ApplicationSubmissionContextProto::New() const {
  return new ApplicationSubmissionContextProto;
}

void ApplicationSubmissionContextProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_application_id()) {
      if (application_id_ != NULL) application_id_->::hadoop::yarn::ApplicationIdProto::Clear();
    }
    if (has_application_name()) {
      if (application_name_ != _default_application_name_) {
        application_name_->assign(*_default_application_name_);
      }
    }
    if (has_queue()) {
      if (queue_ != _default_queue_) {
        queue_->assign(*_default_queue_);
      }
    }
    if (has_priority()) {
      if (priority_ != NULL) priority_->::hadoop::yarn::PriorityProto::Clear();
    }
    if (has_am_container_spec()) {
      if (am_container_spec_ != NULL) am_container_spec_->::hadoop::yarn::ContainerLaunchContextProto::Clear();
    }
    cancel_tokens_when_complete_ = true;
    unmanaged_am_ = false;
    maxappattempts_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_resource()) {
      if (resource_ != NULL) resource_->::hadoop::yarn::ResourceProto::Clear();
    }
    if (has_applicationtype()) {
      if (applicationtype_ != _default_applicationtype_) {
        applicationtype_->assign(*_default_applicationtype_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationSubmissionContextProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ApplicationIdProto application_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_application_name;
        break;
      }

      // optional string application_name = 2 [default = "N/A"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application_name().data(), this->application_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_queue;
        break;
      }

      // optional string queue = 3 [default = "default"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queue().data(), this->queue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_priority;
        break;
      }

      // optional .hadoop.yarn.PriorityProto priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_priority:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priority()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_am_container_spec;
        break;
      }

      // optional .hadoop.yarn.ContainerLaunchContextProto am_container_spec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_am_container_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_am_container_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cancel_tokens_when_complete;
        break;
      }

      // optional bool cancel_tokens_when_complete = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancel_tokens_when_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cancel_tokens_when_complete_)));
          set_has_cancel_tokens_when_complete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_unmanaged_am;
        break;
      }

      // optional bool unmanaged_am = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unmanaged_am:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unmanaged_am_)));
          set_has_unmanaged_am();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxAppAttempts;
        break;
      }

      // optional int32 maxAppAttempts = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxAppAttempts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxappattempts_)));
          set_has_maxappattempts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_resource;
        break;
      }

      // optional .hadoop.yarn.ResourceProto resource = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_applicationType;
        break;
      }

      // optional string applicationType = 10 [default = "YARN"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicationType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicationtype().data(), this->applicationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationSubmissionContextProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ApplicationIdProto application_id = 1;
  if (has_application_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->application_id(), output);
  }

  // optional string application_name = 2 [default = "N/A"];
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_name().data(), this->application_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->application_name(), output);
  }

  // optional string queue = 3 [default = "default"];
  if (has_queue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->queue(), output);
  }

  // optional .hadoop.yarn.PriorityProto priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->priority(), output);
  }

  // optional .hadoop.yarn.ContainerLaunchContextProto am_container_spec = 5;
  if (has_am_container_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->am_container_spec(), output);
  }

  // optional bool cancel_tokens_when_complete = 6 [default = true];
  if (has_cancel_tokens_when_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cancel_tokens_when_complete(), output);
  }

  // optional bool unmanaged_am = 7 [default = false];
  if (has_unmanaged_am()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->unmanaged_am(), output);
  }

  // optional int32 maxAppAttempts = 8 [default = 0];
  if (has_maxappattempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxappattempts(), output);
  }

  // optional .hadoop.yarn.ResourceProto resource = 9;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->resource(), output);
  }

  // optional string applicationType = 10 [default = "YARN"];
  if (has_applicationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationtype().data(), this->applicationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->applicationtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationSubmissionContextProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ApplicationIdProto application_id = 1;
  if (has_application_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->application_id(), target);
  }

  // optional string application_name = 2 [default = "N/A"];
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_name().data(), this->application_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->application_name(), target);
  }

  // optional string queue = 3 [default = "default"];
  if (has_queue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->queue(), target);
  }

  // optional .hadoop.yarn.PriorityProto priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->priority(), target);
  }

  // optional .hadoop.yarn.ContainerLaunchContextProto am_container_spec = 5;
  if (has_am_container_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->am_container_spec(), target);
  }

  // optional bool cancel_tokens_when_complete = 6 [default = true];
  if (has_cancel_tokens_when_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cancel_tokens_when_complete(), target);
  }

  // optional bool unmanaged_am = 7 [default = false];
  if (has_unmanaged_am()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->unmanaged_am(), target);
  }

  // optional int32 maxAppAttempts = 8 [default = 0];
  if (has_maxappattempts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxappattempts(), target);
  }

  // optional .hadoop.yarn.ResourceProto resource = 9;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->resource(), target);
  }

  // optional string applicationType = 10 [default = "YARN"];
  if (has_applicationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationtype().data(), this->applicationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->applicationtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationSubmissionContextProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ApplicationIdProto application_id = 1;
    if (has_application_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_id());
    }

    // optional string application_name = 2 [default = "N/A"];
    if (has_application_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_name());
    }

    // optional string queue = 3 [default = "default"];
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queue());
    }

    // optional .hadoop.yarn.PriorityProto priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priority());
    }

    // optional .hadoop.yarn.ContainerLaunchContextProto am_container_spec = 5;
    if (has_am_container_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->am_container_spec());
    }

    // optional bool cancel_tokens_when_complete = 6 [default = true];
    if (has_cancel_tokens_when_complete()) {
      total_size += 1 + 1;
    }

    // optional bool unmanaged_am = 7 [default = false];
    if (has_unmanaged_am()) {
      total_size += 1 + 1;
    }

    // optional int32 maxAppAttempts = 8 [default = 0];
    if (has_maxappattempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxappattempts());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .hadoop.yarn.ResourceProto resource = 9;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

    // optional string applicationType = 10 [default = "YARN"];
    if (has_applicationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationSubmissionContextProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationSubmissionContextProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationSubmissionContextProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationSubmissionContextProto::MergeFrom(const ApplicationSubmissionContextProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_id()) {
      mutable_application_id()->::hadoop::yarn::ApplicationIdProto::MergeFrom(from.application_id());
    }
    if (from.has_application_name()) {
      set_application_name(from.application_name());
    }
    if (from.has_queue()) {
      set_queue(from.queue());
    }
    if (from.has_priority()) {
      mutable_priority()->::hadoop::yarn::PriorityProto::MergeFrom(from.priority());
    }
    if (from.has_am_container_spec()) {
      mutable_am_container_spec()->::hadoop::yarn::ContainerLaunchContextProto::MergeFrom(from.am_container_spec());
    }
    if (from.has_cancel_tokens_when_complete()) {
      set_cancel_tokens_when_complete(from.cancel_tokens_when_complete());
    }
    if (from.has_unmanaged_am()) {
      set_unmanaged_am(from.unmanaged_am());
    }
    if (from.has_maxappattempts()) {
      set_maxappattempts(from.maxappattempts());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resource()) {
      mutable_resource()->::hadoop::yarn::ResourceProto::MergeFrom(from.resource());
    }
    if (from.has_applicationtype()) {
      set_applicationtype(from.applicationtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationSubmissionContextProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationSubmissionContextProto::CopyFrom(const ApplicationSubmissionContextProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationSubmissionContextProto::IsInitialized() const {

  return true;
}

void ApplicationSubmissionContextProto::Swap(ApplicationSubmissionContextProto* other) {
  if (other != this) {
    std::swap(application_id_, other->application_id_);
    std::swap(application_name_, other->application_name_);
    std::swap(queue_, other->queue_);
    std::swap(priority_, other->priority_);
    std::swap(am_container_spec_, other->am_container_spec_);
    std::swap(cancel_tokens_when_complete_, other->cancel_tokens_when_complete_);
    std::swap(unmanaged_am_, other->unmanaged_am_);
    std::swap(maxappattempts_, other->maxappattempts_);
    std::swap(resource_, other->resource_);
    std::swap(applicationtype_, other->applicationtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationSubmissionContextProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationSubmissionContextProto_descriptor_;
  metadata.reflection = ApplicationSubmissionContextProto_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ApplicationACLMapProto::_default_acl_ = NULL;
#ifndef _MSC_VER
const int ApplicationACLMapProto::kAccessTypeFieldNumber;
const int ApplicationACLMapProto::kAclFieldNumber;
#endif  // !_MSC_VER

ApplicationACLMapProto::ApplicationACLMapProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationACLMapProto::InitAsDefaultInstance() {
}

ApplicationACLMapProto::ApplicationACLMapProto(const ApplicationACLMapProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationACLMapProto::SharedCtor() {
  _cached_size_ = 0;
  accesstype_ = 1;
  acl_ = const_cast< ::std::string*>(_default_acl_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationACLMapProto::~ApplicationACLMapProto() {
  SharedDtor();
}

void ApplicationACLMapProto::SharedDtor() {
  if (acl_ != _default_acl_) {
    delete acl_;
  }
  if (this != default_instance_) {
  }
}

void ApplicationACLMapProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationACLMapProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationACLMapProto_descriptor_;
}

const ApplicationACLMapProto& ApplicationACLMapProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ApplicationACLMapProto* ApplicationACLMapProto::default_instance_ = NULL;

ApplicationACLMapProto* ApplicationACLMapProto::New() const {
  return new ApplicationACLMapProto;
}

void ApplicationACLMapProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accesstype_ = 1;
    if (has_acl()) {
      if (acl_ != _default_acl_) {
        acl_->assign(*_default_acl_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationACLMapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ApplicationAccessTypeProto accessType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::ApplicationAccessTypeProto_IsValid(value)) {
            set_accesstype(static_cast< ::hadoop::yarn::ApplicationAccessTypeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acl;
        break;
      }

      // optional string acl = 2 [default = " "];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acl().data(), this->acl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationACLMapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ApplicationAccessTypeProto accessType = 1;
  if (has_accesstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->accesstype(), output);
  }

  // optional string acl = 2 [default = " "];
  if (has_acl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acl().data(), this->acl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationACLMapProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ApplicationAccessTypeProto accessType = 1;
  if (has_accesstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->accesstype(), target);
  }

  // optional string acl = 2 [default = " "];
  if (has_acl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acl().data(), this->acl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationACLMapProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ApplicationAccessTypeProto accessType = 1;
    if (has_accesstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->accesstype());
    }

    // optional string acl = 2 [default = " "];
    if (has_acl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationACLMapProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationACLMapProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationACLMapProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationACLMapProto::MergeFrom(const ApplicationACLMapProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accesstype()) {
      set_accesstype(from.accesstype());
    }
    if (from.has_acl()) {
      set_acl(from.acl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationACLMapProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationACLMapProto::CopyFrom(const ApplicationACLMapProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationACLMapProto::IsInitialized() const {

  return true;
}

void ApplicationACLMapProto::Swap(ApplicationACLMapProto* other) {
  if (other != this) {
    std::swap(accesstype_, other->accesstype_);
    std::swap(acl_, other->acl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationACLMapProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationACLMapProto_descriptor_;
  metadata.reflection = ApplicationACLMapProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YarnClusterMetricsProto::kNumNodeManagersFieldNumber;
#endif  // !_MSC_VER

YarnClusterMetricsProto::YarnClusterMetricsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YarnClusterMetricsProto::InitAsDefaultInstance() {
}

YarnClusterMetricsProto::YarnClusterMetricsProto(const YarnClusterMetricsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YarnClusterMetricsProto::SharedCtor() {
  _cached_size_ = 0;
  num_node_managers_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YarnClusterMetricsProto::~YarnClusterMetricsProto() {
  SharedDtor();
}

void YarnClusterMetricsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YarnClusterMetricsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YarnClusterMetricsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YarnClusterMetricsProto_descriptor_;
}

const YarnClusterMetricsProto& YarnClusterMetricsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

YarnClusterMetricsProto* YarnClusterMetricsProto::default_instance_ = NULL;

YarnClusterMetricsProto* YarnClusterMetricsProto::New() const {
  return new YarnClusterMetricsProto;
}

void YarnClusterMetricsProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_node_managers_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YarnClusterMetricsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_node_managers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_node_managers_)));
          set_has_num_node_managers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YarnClusterMetricsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_node_managers = 1;
  if (has_num_node_managers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_node_managers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YarnClusterMetricsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_node_managers = 1;
  if (has_num_node_managers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_node_managers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YarnClusterMetricsProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_node_managers = 1;
    if (has_num_node_managers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_node_managers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YarnClusterMetricsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YarnClusterMetricsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YarnClusterMetricsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YarnClusterMetricsProto::MergeFrom(const YarnClusterMetricsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_node_managers()) {
      set_num_node_managers(from.num_node_managers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YarnClusterMetricsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YarnClusterMetricsProto::CopyFrom(const YarnClusterMetricsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YarnClusterMetricsProto::IsInitialized() const {

  return true;
}

void YarnClusterMetricsProto::Swap(YarnClusterMetricsProto* other) {
  if (other != this) {
    std::swap(num_node_managers_, other->num_node_managers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YarnClusterMetricsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YarnClusterMetricsProto_descriptor_;
  metadata.reflection = YarnClusterMetricsProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueueInfoProto::kQueueNameFieldNumber;
const int QueueInfoProto::kCapacityFieldNumber;
const int QueueInfoProto::kMaximumCapacityFieldNumber;
const int QueueInfoProto::kCurrentCapacityFieldNumber;
const int QueueInfoProto::kStateFieldNumber;
const int QueueInfoProto::kChildQueuesFieldNumber;
const int QueueInfoProto::kApplicationsFieldNumber;
#endif  // !_MSC_VER

QueueInfoProto::QueueInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueueInfoProto::InitAsDefaultInstance() {
}

QueueInfoProto::QueueInfoProto(const QueueInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueueInfoProto::SharedCtor() {
  _cached_size_ = 0;
  queuename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capacity_ = 0;
  maximumcapacity_ = 0;
  currentcapacity_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueueInfoProto::~QueueInfoProto() {
  SharedDtor();
}

void QueueInfoProto::SharedDtor() {
  if (queuename_ != &::google::protobuf::internal::kEmptyString) {
    delete queuename_;
  }
  if (this != default_instance_) {
  }
}

void QueueInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueueInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueInfoProto_descriptor_;
}

const QueueInfoProto& QueueInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

QueueInfoProto* QueueInfoProto::default_instance_ = NULL;

QueueInfoProto* QueueInfoProto::New() const {
  return new QueueInfoProto;
}

void QueueInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queuename()) {
      if (queuename_ != &::google::protobuf::internal::kEmptyString) {
        queuename_->clear();
      }
    }
    capacity_ = 0;
    maximumcapacity_ = 0;
    currentcapacity_ = 0;
    state_ = 1;
  }
  childqueues_.Clear();
  applications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueueInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string queueName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queuename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queuename().data(), this->queuename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_capacity;
        break;
      }

      // optional float capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_maximumCapacity;
        break;
      }

      // optional float maximumCapacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maximumCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maximumcapacity_)));
          set_has_maximumcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_currentCapacity;
        break;
      }

      // optional float currentCapacity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_currentCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentcapacity_)));
          set_has_currentcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .hadoop.yarn.QueueStateProto state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::QueueStateProto_IsValid(value)) {
            set_state(static_cast< ::hadoop::yarn::QueueStateProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_childQueues;
        break;
      }

      // repeated .hadoop.yarn.QueueInfoProto childQueues = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_childQueues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childqueues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_childQueues;
        if (input->ExpectTag(58)) goto parse_applications;
        break;
      }

      // repeated .hadoop.yarn.ApplicationReportProto applications = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_applications;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueueInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string queueName = 1;
  if (has_queuename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queuename().data(), this->queuename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queuename(), output);
  }

  // optional float capacity = 2;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->capacity(), output);
  }

  // optional float maximumCapacity = 3;
  if (has_maximumcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maximumcapacity(), output);
  }

  // optional float currentCapacity = 4;
  if (has_currentcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->currentcapacity(), output);
  }

  // optional .hadoop.yarn.QueueStateProto state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // repeated .hadoop.yarn.QueueInfoProto childQueues = 6;
  for (int i = 0; i < this->childqueues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->childqueues(i), output);
  }

  // repeated .hadoop.yarn.ApplicationReportProto applications = 7;
  for (int i = 0; i < this->applications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->applications(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueueInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string queueName = 1;
  if (has_queuename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queuename().data(), this->queuename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queuename(), target);
  }

  // optional float capacity = 2;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->capacity(), target);
  }

  // optional float maximumCapacity = 3;
  if (has_maximumcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maximumcapacity(), target);
  }

  // optional float currentCapacity = 4;
  if (has_currentcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->currentcapacity(), target);
  }

  // optional .hadoop.yarn.QueueStateProto state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // repeated .hadoop.yarn.QueueInfoProto childQueues = 6;
  for (int i = 0; i < this->childqueues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->childqueues(i), target);
  }

  // repeated .hadoop.yarn.ApplicationReportProto applications = 7;
  for (int i = 0; i < this->applications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->applications(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueueInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string queueName = 1;
    if (has_queuename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queuename());
    }

    // optional float capacity = 2;
    if (has_capacity()) {
      total_size += 1 + 4;
    }

    // optional float maximumCapacity = 3;
    if (has_maximumcapacity()) {
      total_size += 1 + 4;
    }

    // optional float currentCapacity = 4;
    if (has_currentcapacity()) {
      total_size += 1 + 4;
    }

    // optional .hadoop.yarn.QueueStateProto state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated .hadoop.yarn.QueueInfoProto childQueues = 6;
  total_size += 1 * this->childqueues_size();
  for (int i = 0; i < this->childqueues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childqueues(i));
  }

  // repeated .hadoop.yarn.ApplicationReportProto applications = 7;
  total_size += 1 * this->applications_size();
  for (int i = 0; i < this->applications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applications(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueueInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueueInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueueInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueueInfoProto::MergeFrom(const QueueInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  childqueues_.MergeFrom(from.childqueues_);
  applications_.MergeFrom(from.applications_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queuename()) {
      set_queuename(from.queuename());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_maximumcapacity()) {
      set_maximumcapacity(from.maximumcapacity());
    }
    if (from.has_currentcapacity()) {
      set_currentcapacity(from.currentcapacity());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueueInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueInfoProto::CopyFrom(const QueueInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueInfoProto::IsInitialized() const {

  for (int i = 0; i < childqueues_size(); i++) {
    if (!this->childqueues(i).IsInitialized()) return false;
  }
  for (int i = 0; i < applications_size(); i++) {
    if (!this->applications(i).IsInitialized()) return false;
  }
  return true;
}

void QueueInfoProto::Swap(QueueInfoProto* other) {
  if (other != this) {
    std::swap(queuename_, other->queuename_);
    std::swap(capacity_, other->capacity_);
    std::swap(maximumcapacity_, other->maximumcapacity_);
    std::swap(currentcapacity_, other->currentcapacity_);
    std::swap(state_, other->state_);
    childqueues_.Swap(&other->childqueues_);
    applications_.Swap(&other->applications_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueueInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueueInfoProto_descriptor_;
  metadata.reflection = QueueInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueueUserACLInfoProto::kQueueNameFieldNumber;
const int QueueUserACLInfoProto::kUserAclsFieldNumber;
#endif  // !_MSC_VER

QueueUserACLInfoProto::QueueUserACLInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueueUserACLInfoProto::InitAsDefaultInstance() {
}

QueueUserACLInfoProto::QueueUserACLInfoProto(const QueueUserACLInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueueUserACLInfoProto::SharedCtor() {
  _cached_size_ = 0;
  queuename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueueUserACLInfoProto::~QueueUserACLInfoProto() {
  SharedDtor();
}

void QueueUserACLInfoProto::SharedDtor() {
  if (queuename_ != &::google::protobuf::internal::kEmptyString) {
    delete queuename_;
  }
  if (this != default_instance_) {
  }
}

void QueueUserACLInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueueUserACLInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueUserACLInfoProto_descriptor_;
}

const QueueUserACLInfoProto& QueueUserACLInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

QueueUserACLInfoProto* QueueUserACLInfoProto::default_instance_ = NULL;

QueueUserACLInfoProto* QueueUserACLInfoProto::New() const {
  return new QueueUserACLInfoProto;
}

void QueueUserACLInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queuename()) {
      if (queuename_ != &::google::protobuf::internal::kEmptyString) {
        queuename_->clear();
      }
    }
  }
  useracls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueueUserACLInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string queueName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queuename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queuename().data(), this->queuename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userAcls;
        break;
      }

      // repeated .hadoop.yarn.QueueACLProto userAcls = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userAcls:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::QueueACLProto_IsValid(value)) {
            add_useracls(static_cast< ::hadoop::yarn::QueueACLProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::hadoop::yarn::QueueACLProto_IsValid,
                 this->mutable_useracls())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userAcls;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueueUserACLInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string queueName = 1;
  if (has_queuename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queuename().data(), this->queuename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queuename(), output);
  }

  // repeated .hadoop.yarn.QueueACLProto userAcls = 2;
  for (int i = 0; i < this->useracls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->useracls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueueUserACLInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string queueName = 1;
  if (has_queuename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queuename().data(), this->queuename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queuename(), target);
  }

  // repeated .hadoop.yarn.QueueACLProto userAcls = 2;
  for (int i = 0; i < this->useracls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->useracls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueueUserACLInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string queueName = 1;
    if (has_queuename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queuename());
    }

  }
  // repeated .hadoop.yarn.QueueACLProto userAcls = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->useracls_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->useracls(i));
    }
    total_size += 1 * this->useracls_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueueUserACLInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueueUserACLInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueueUserACLInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueueUserACLInfoProto::MergeFrom(const QueueUserACLInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  useracls_.MergeFrom(from.useracls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queuename()) {
      set_queuename(from.queuename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueueUserACLInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueUserACLInfoProto::CopyFrom(const QueueUserACLInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueUserACLInfoProto::IsInitialized() const {

  return true;
}

void QueueUserACLInfoProto::Swap(QueueUserACLInfoProto* other) {
  if (other != this) {
    std::swap(queuename_, other->queuename_);
    useracls_.Swap(&other->useracls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueueUserACLInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueueUserACLInfoProto_descriptor_;
  metadata.reflection = QueueUserACLInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerLaunchContextProto::kLocalResourcesFieldNumber;
const int ContainerLaunchContextProto::kTokensFieldNumber;
const int ContainerLaunchContextProto::kServiceDataFieldNumber;
const int ContainerLaunchContextProto::kEnvironmentFieldNumber;
const int ContainerLaunchContextProto::kCommandFieldNumber;
const int ContainerLaunchContextProto::kApplicationACLsFieldNumber;
#endif  // !_MSC_VER

ContainerLaunchContextProto::ContainerLaunchContextProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerLaunchContextProto::InitAsDefaultInstance() {
}

ContainerLaunchContextProto::ContainerLaunchContextProto(const ContainerLaunchContextProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerLaunchContextProto::SharedCtor() {
  _cached_size_ = 0;
  tokens_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerLaunchContextProto::~ContainerLaunchContextProto() {
  SharedDtor();
}

void ContainerLaunchContextProto::SharedDtor() {
  if (tokens_ != &::google::protobuf::internal::kEmptyString) {
    delete tokens_;
  }
  if (this != default_instance_) {
  }
}

void ContainerLaunchContextProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerLaunchContextProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerLaunchContextProto_descriptor_;
}

const ContainerLaunchContextProto& ContainerLaunchContextProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ContainerLaunchContextProto* ContainerLaunchContextProto::default_instance_ = NULL;

ContainerLaunchContextProto* ContainerLaunchContextProto::New() const {
  return new ContainerLaunchContextProto;
}

void ContainerLaunchContextProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tokens()) {
      if (tokens_ != &::google::protobuf::internal::kEmptyString) {
        tokens_->clear();
      }
    }
  }
  localresources_.Clear();
  service_data_.Clear();
  environment_.Clear();
  command_.Clear();
  application_acls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerLaunchContextProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hadoop.yarn.StringLocalResourceMapProto localResources = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localResources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_localresources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_localResources;
        if (input->ExpectTag(18)) goto parse_tokens;
        break;
      }

      // optional bytes tokens = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_data;
        break;
      }

      // repeated .hadoop.yarn.StringBytesMapProto service_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_data;
        if (input->ExpectTag(34)) goto parse_environment;
        break;
      }

      // repeated .hadoop.yarn.StringStringMapProto environment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_environment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_environment;
        if (input->ExpectTag(42)) goto parse_command;
        break;
      }

      // repeated string command = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command(this->command_size() - 1).data(),
            this->command(this->command_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_command;
        if (input->ExpectTag(50)) goto parse_application_ACLs;
        break;
      }

      // repeated .hadoop.yarn.ApplicationACLMapProto application_ACLs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_ACLs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_application_acls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_application_ACLs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerLaunchContextProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hadoop.yarn.StringLocalResourceMapProto localResources = 1;
  for (int i = 0; i < this->localresources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->localresources(i), output);
  }

  // optional bytes tokens = 2;
  if (has_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tokens(), output);
  }

  // repeated .hadoop.yarn.StringBytesMapProto service_data = 3;
  for (int i = 0; i < this->service_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->service_data(i), output);
  }

  // repeated .hadoop.yarn.StringStringMapProto environment = 4;
  for (int i = 0; i < this->environment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->environment(i), output);
  }

  // repeated string command = 5;
  for (int i = 0; i < this->command_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->command(i).data(), this->command(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->command(i), output);
  }

  // repeated .hadoop.yarn.ApplicationACLMapProto application_ACLs = 6;
  for (int i = 0; i < this->application_acls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->application_acls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerLaunchContextProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hadoop.yarn.StringLocalResourceMapProto localResources = 1;
  for (int i = 0; i < this->localresources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->localresources(i), target);
  }

  // optional bytes tokens = 2;
  if (has_tokens()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tokens(), target);
  }

  // repeated .hadoop.yarn.StringBytesMapProto service_data = 3;
  for (int i = 0; i < this->service_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->service_data(i), target);
  }

  // repeated .hadoop.yarn.StringStringMapProto environment = 4;
  for (int i = 0; i < this->environment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->environment(i), target);
  }

  // repeated string command = 5;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command(i).data(), this->command(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->command(i), target);
  }

  // repeated .hadoop.yarn.ApplicationACLMapProto application_ACLs = 6;
  for (int i = 0; i < this->application_acls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->application_acls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerLaunchContextProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes tokens = 2;
    if (has_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tokens());
    }

  }
  // repeated .hadoop.yarn.StringLocalResourceMapProto localResources = 1;
  total_size += 1 * this->localresources_size();
  for (int i = 0; i < this->localresources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->localresources(i));
  }

  // repeated .hadoop.yarn.StringBytesMapProto service_data = 3;
  total_size += 1 * this->service_data_size();
  for (int i = 0; i < this->service_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_data(i));
  }

  // repeated .hadoop.yarn.StringStringMapProto environment = 4;
  total_size += 1 * this->environment_size();
  for (int i = 0; i < this->environment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->environment(i));
  }

  // repeated string command = 5;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command(i));
  }

  // repeated .hadoop.yarn.ApplicationACLMapProto application_ACLs = 6;
  total_size += 1 * this->application_acls_size();
  for (int i = 0; i < this->application_acls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->application_acls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerLaunchContextProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerLaunchContextProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerLaunchContextProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerLaunchContextProto::MergeFrom(const ContainerLaunchContextProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  localresources_.MergeFrom(from.localresources_);
  service_data_.MergeFrom(from.service_data_);
  environment_.MergeFrom(from.environment_);
  command_.MergeFrom(from.command_);
  application_acls_.MergeFrom(from.application_acls_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tokens()) {
      set_tokens(from.tokens());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerLaunchContextProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerLaunchContextProto::CopyFrom(const ContainerLaunchContextProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerLaunchContextProto::IsInitialized() const {

  return true;
}

void ContainerLaunchContextProto::Swap(ContainerLaunchContextProto* other) {
  if (other != this) {
    localresources_.Swap(&other->localresources_);
    std::swap(tokens_, other->tokens_);
    service_data_.Swap(&other->service_data_);
    environment_.Swap(&other->environment_);
    command_.Swap(&other->command_);
    application_acls_.Swap(&other->application_acls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerLaunchContextProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerLaunchContextProto_descriptor_;
  metadata.reflection = ContainerLaunchContextProto_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ContainerStatusProto::_default_diagnostics_ = NULL;
#ifndef _MSC_VER
const int ContainerStatusProto::kContainerIdFieldNumber;
const int ContainerStatusProto::kStateFieldNumber;
const int ContainerStatusProto::kDiagnosticsFieldNumber;
const int ContainerStatusProto::kExitStatusFieldNumber;
#endif  // !_MSC_VER

ContainerStatusProto::ContainerStatusProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerStatusProto::InitAsDefaultInstance() {
  container_id_ = const_cast< ::hadoop::yarn::ContainerIdProto*>(&::hadoop::yarn::ContainerIdProto::default_instance());
}

ContainerStatusProto::ContainerStatusProto(const ContainerStatusProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerStatusProto::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = NULL;
  state_ = 1;
  diagnostics_ = const_cast< ::std::string*>(_default_diagnostics_);
  exit_status_ = -1000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerStatusProto::~ContainerStatusProto() {
  SharedDtor();
}

void ContainerStatusProto::SharedDtor() {
  if (diagnostics_ != _default_diagnostics_) {
    delete diagnostics_;
  }
  if (this != default_instance_) {
    delete container_id_;
  }
}

void ContainerStatusProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerStatusProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerStatusProto_descriptor_;
}

const ContainerStatusProto& ContainerStatusProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

ContainerStatusProto* ContainerStatusProto::default_instance_ = NULL;

ContainerStatusProto* ContainerStatusProto::New() const {
  return new ContainerStatusProto;
}

void ContainerStatusProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container_id()) {
      if (container_id_ != NULL) container_id_->::hadoop::yarn::ContainerIdProto::Clear();
    }
    state_ = 1;
    if (has_diagnostics()) {
      if (diagnostics_ != _default_diagnostics_) {
        diagnostics_->assign(*_default_diagnostics_);
      }
    }
    exit_status_ = -1000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerStatusProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hadoop.yarn.ContainerIdProto container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .hadoop.yarn.ContainerStateProto state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hadoop::yarn::ContainerStateProto_IsValid(value)) {
            set_state(static_cast< ::hadoop::yarn::ContainerStateProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_diagnostics;
        break;
      }

      // optional string diagnostics = 3 [default = "N/A"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diagnostics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnostics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diagnostics().data(), this->diagnostics().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exit_status;
        break;
      }

      // optional int32 exit_status = 4 [default = -1000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_status_)));
          set_has_exit_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerStatusProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hadoop.yarn.ContainerIdProto container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container_id(), output);
  }

  // optional .hadoop.yarn.ContainerStateProto state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional string diagnostics = 3 [default = "N/A"];
  if (has_diagnostics()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diagnostics().data(), this->diagnostics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->diagnostics(), output);
  }

  // optional int32 exit_status = 4 [default = -1000];
  if (has_exit_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exit_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerStatusProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hadoop.yarn.ContainerIdProto container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container_id(), target);
  }

  // optional .hadoop.yarn.ContainerStateProto state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional string diagnostics = 3 [default = "N/A"];
  if (has_diagnostics()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diagnostics().data(), this->diagnostics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->diagnostics(), target);
  }

  // optional int32 exit_status = 4 [default = -1000];
  if (has_exit_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exit_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerStatusProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hadoop.yarn.ContainerIdProto container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_id());
    }

    // optional .hadoop.yarn.ContainerStateProto state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string diagnostics = 3 [default = "N/A"];
    if (has_diagnostics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diagnostics());
    }

    // optional int32 exit_status = 4 [default = -1000];
    if (has_exit_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerStatusProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerStatusProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerStatusProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerStatusProto::MergeFrom(const ContainerStatusProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      mutable_container_id()->::hadoop::yarn::ContainerIdProto::MergeFrom(from.container_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_diagnostics()) {
      set_diagnostics(from.diagnostics());
    }
    if (from.has_exit_status()) {
      set_exit_status(from.exit_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerStatusProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatusProto::CopyFrom(const ContainerStatusProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatusProto::IsInitialized() const {

  return true;
}

void ContainerStatusProto::Swap(ContainerStatusProto* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    std::swap(state_, other->state_);
    std::swap(diagnostics_, other->diagnostics_);
    std::swap(exit_status_, other->exit_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerStatusProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerStatusProto_descriptor_;
  metadata.reflection = ContainerStatusProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringLocalResourceMapProto::kKeyFieldNumber;
const int StringLocalResourceMapProto::kValueFieldNumber;
#endif  // !_MSC_VER

StringLocalResourceMapProto::StringLocalResourceMapProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringLocalResourceMapProto::InitAsDefaultInstance() {
  value_ = const_cast< ::hadoop::yarn::LocalResourceProto*>(&::hadoop::yarn::LocalResourceProto::default_instance());
}

StringLocalResourceMapProto::StringLocalResourceMapProto(const StringLocalResourceMapProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringLocalResourceMapProto::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringLocalResourceMapProto::~StringLocalResourceMapProto() {
  SharedDtor();
}

void StringLocalResourceMapProto::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void StringLocalResourceMapProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringLocalResourceMapProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringLocalResourceMapProto_descriptor_;
}

const StringLocalResourceMapProto& StringLocalResourceMapProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

StringLocalResourceMapProto* StringLocalResourceMapProto::default_instance_ = NULL;

StringLocalResourceMapProto* StringLocalResourceMapProto::New() const {
  return new StringLocalResourceMapProto;
}

void StringLocalResourceMapProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::hadoop::yarn::LocalResourceProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringLocalResourceMapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .hadoop.yarn.LocalResourceProto value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringLocalResourceMapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional .hadoop.yarn.LocalResourceProto value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringLocalResourceMapProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .hadoop.yarn.LocalResourceProto value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringLocalResourceMapProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .hadoop.yarn.LocalResourceProto value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringLocalResourceMapProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringLocalResourceMapProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringLocalResourceMapProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringLocalResourceMapProto::MergeFrom(const StringLocalResourceMapProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::hadoop::yarn::LocalResourceProto::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringLocalResourceMapProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringLocalResourceMapProto::CopyFrom(const StringLocalResourceMapProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringLocalResourceMapProto::IsInitialized() const {

  return true;
}

void StringLocalResourceMapProto::Swap(StringLocalResourceMapProto* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringLocalResourceMapProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringLocalResourceMapProto_descriptor_;
  metadata.reflection = StringLocalResourceMapProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringStringMapProto::kKeyFieldNumber;
const int StringStringMapProto::kValueFieldNumber;
#endif  // !_MSC_VER

StringStringMapProto::StringStringMapProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringStringMapProto::InitAsDefaultInstance() {
}

StringStringMapProto::StringStringMapProto(const StringStringMapProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringStringMapProto::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringStringMapProto::~StringStringMapProto() {
  SharedDtor();
}

void StringStringMapProto::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StringStringMapProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringStringMapProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringStringMapProto_descriptor_;
}

const StringStringMapProto& StringStringMapProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

StringStringMapProto* StringStringMapProto::default_instance_ = NULL;

StringStringMapProto* StringStringMapProto::New() const {
  return new StringStringMapProto;
}

void StringStringMapProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringStringMapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringStringMapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringStringMapProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringStringMapProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringStringMapProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringStringMapProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringStringMapProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringStringMapProto::MergeFrom(const StringStringMapProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringStringMapProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringStringMapProto::CopyFrom(const StringStringMapProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringStringMapProto::IsInitialized() const {

  return true;
}

void StringStringMapProto::Swap(StringStringMapProto* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringStringMapProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringStringMapProto_descriptor_;
  metadata.reflection = StringStringMapProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringBytesMapProto::kKeyFieldNumber;
const int StringBytesMapProto::kValueFieldNumber;
#endif  // !_MSC_VER

StringBytesMapProto::StringBytesMapProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringBytesMapProto::InitAsDefaultInstance() {
}

StringBytesMapProto::StringBytesMapProto(const StringBytesMapProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringBytesMapProto::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringBytesMapProto::~StringBytesMapProto() {
  SharedDtor();
}

void StringBytesMapProto::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StringBytesMapProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringBytesMapProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringBytesMapProto_descriptor_;
}

const StringBytesMapProto& StringBytesMapProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yarn_5fprotos_2eproto();
  return *default_instance_;
}

StringBytesMapProto* StringBytesMapProto::default_instance_ = NULL;

StringBytesMapProto* StringBytesMapProto::New() const {
  return new StringBytesMapProto;
}

void StringBytesMapProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringBytesMapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringBytesMapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringBytesMapProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringBytesMapProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringBytesMapProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringBytesMapProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringBytesMapProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringBytesMapProto::MergeFrom(const StringBytesMapProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringBytesMapProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringBytesMapProto::CopyFrom(const StringBytesMapProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringBytesMapProto::IsInitialized() const {

  return true;
}

void StringBytesMapProto::Swap(StringBytesMapProto* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringBytesMapProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringBytesMapProto_descriptor_;
  metadata.reflection = StringBytesMapProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yarn
}  // namespace hadoop

// @@protoc_insertion_point(global_scope)
