// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: applicationclient_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "applicationclient_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hadoop {
namespace yarn {

namespace {

const ::google::protobuf::ServiceDescriptor* ApplicationClientProtocolService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_applicationclient_5fprotocol_2eproto() {
  protobuf_AddDesc_applicationclient_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "applicationclient_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ApplicationClientProtocolService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_applicationclient_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_applicationclient_5fprotocol_2eproto() {
}

void protobuf_AddDesc_applicationclient_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hadoop::common::protobuf_AddDesc_Security_2eproto();
  ::hadoop::yarn::protobuf_AddDesc_yarn_5fservice_5fprotos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n applicationclient_protocol.proto\022\013hado"
    "op.yarn\032\016Security.proto\032\031yarn_service_pr"
    "otos.proto2\340\n\n ApplicationClientProtocol"
    "Service\022l\n\021getNewApplication\022*.hadoop.ya"
    "rn.GetNewApplicationRequestProto\032+.hadoo"
    "p.yarn.GetNewApplicationResponseProto\022u\n"
    "\024getApplicationReport\022-.hadoop.yarn.GetA"
    "pplicationReportRequestProto\032..hadoop.ya"
    "rn.GetApplicationReportResponseProto\022l\n\021"
    "submitApplication\022*.hadoop.yarn.SubmitAp"
    "plicationRequestProto\032+.hadoop.yarn.Subm"
    "itApplicationResponseProto\022k\n\024forceKillA"
    "pplication\022(.hadoop.yarn.KillApplication"
    "RequestProto\032).hadoop.yarn.KillApplicati"
    "onResponseProto\022l\n\021getClusterMetrics\022*.h"
    "adoop.yarn.GetClusterMetricsRequestProto"
    "\032+.hadoop.yarn.GetClusterMetricsResponse"
    "Proto\022f\n\017getApplications\022(.hadoop.yarn.G"
    "etApplicationsRequestProto\032).hadoop.yarn"
    ".GetApplicationsResponseProto\022f\n\017getClus"
    "terNodes\022(.hadoop.yarn.GetClusterNodesRe"
    "questProto\032).hadoop.yarn.GetClusterNodes"
    "ResponseProto\022]\n\014getQueueInfo\022%.hadoop.y"
    "arn.GetQueueInfoRequestProto\032&.hadoop.ya"
    "rn.GetQueueInfoResponseProto\022q\n\020getQueue"
    "UserAcls\022-.hadoop.yarn.GetQueueUserAclsI"
    "nfoRequestProto\032..hadoop.yarn.GetQueueUs"
    "erAclsInfoResponseProto\022s\n\022getDelegation"
    "Token\022-.hadoop.common.GetDelegationToken"
    "RequestProto\032..hadoop.common.GetDelegati"
    "onTokenResponseProto\022y\n\024renewDelegationT"
    "oken\022/.hadoop.common.RenewDelegationToke"
    "nRequestProto\0320.hadoop.common.RenewDeleg"
    "ationTokenResponseProto\022|\n\025cancelDelegat"
    "ionToken\0220.hadoop.common.CancelDelegatio"
    "nTokenRequestProto\0321.hadoop.common.Cance"
    "lDelegationTokenResponseProtoBE\n\034org.apa"
    "che.hadoop.yarn.protoB\031ApplicationClient"
    "Protocol\200\001\001\210\001\001\220\001\001\240\001\001", 1540);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "applicationclient_protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_applicationclient_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_applicationclient_5fprotocol_2eproto {
  StaticDescriptorInitializer_applicationclient_5fprotocol_2eproto() {
    protobuf_AddDesc_applicationclient_5fprotocol_2eproto();
  }
} static_descriptor_initializer_applicationclient_5fprotocol_2eproto_;

// ===================================================================

ApplicationClientProtocolService::~ApplicationClientProtocolService() {}

const ::google::protobuf::ServiceDescriptor* ApplicationClientProtocolService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationClientProtocolService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ApplicationClientProtocolService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationClientProtocolService_descriptor_;
}

void ApplicationClientProtocolService::getNewApplication(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::GetNewApplicationRequestProto*,
                         ::hadoop::yarn::GetNewApplicationResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getNewApplication() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::getApplicationReport(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::GetApplicationReportRequestProto*,
                         ::hadoop::yarn::GetApplicationReportResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getApplicationReport() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::submitApplication(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::SubmitApplicationRequestProto*,
                         ::hadoop::yarn::SubmitApplicationResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method submitApplication() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::forceKillApplication(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::KillApplicationRequestProto*,
                         ::hadoop::yarn::KillApplicationResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method forceKillApplication() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::getClusterMetrics(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::GetClusterMetricsRequestProto*,
                         ::hadoop::yarn::GetClusterMetricsResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getClusterMetrics() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::getApplications(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::GetApplicationsRequestProto*,
                         ::hadoop::yarn::GetApplicationsResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getApplications() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::getClusterNodes(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::GetClusterNodesRequestProto*,
                         ::hadoop::yarn::GetClusterNodesResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getClusterNodes() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::getQueueInfo(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::GetQueueInfoRequestProto*,
                         ::hadoop::yarn::GetQueueInfoResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getQueueInfo() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::getQueueUserAcls(::google::protobuf::RpcController* controller,
                         const ::hadoop::yarn::GetQueueUserAclsInfoRequestProto*,
                         ::hadoop::yarn::GetQueueUserAclsInfoResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getQueueUserAcls() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::getDelegationToken(::google::protobuf::RpcController* controller,
                         const ::hadoop::common::GetDelegationTokenRequestProto*,
                         ::hadoop::common::GetDelegationTokenResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDelegationToken() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::renewDelegationToken(::google::protobuf::RpcController* controller,
                         const ::hadoop::common::RenewDelegationTokenRequestProto*,
                         ::hadoop::common::RenewDelegationTokenResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method renewDelegationToken() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::cancelDelegationToken(::google::protobuf::RpcController* controller,
                         const ::hadoop::common::CancelDelegationTokenRequestProto*,
                         ::hadoop::common::CancelDelegationTokenResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cancelDelegationToken() not implemented.");
  done->Run();
}

void ApplicationClientProtocolService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ApplicationClientProtocolService_descriptor_);
  switch(method->index()) {
    case 0:
      getNewApplication(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::GetNewApplicationRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::GetNewApplicationResponseProto*>(response),
             done);
      break;
    case 1:
      getApplicationReport(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::GetApplicationReportRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::GetApplicationReportResponseProto*>(response),
             done);
      break;
    case 2:
      submitApplication(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::SubmitApplicationRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::SubmitApplicationResponseProto*>(response),
             done);
      break;
    case 3:
      forceKillApplication(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::KillApplicationRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::KillApplicationResponseProto*>(response),
             done);
      break;
    case 4:
      getClusterMetrics(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::GetClusterMetricsRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::GetClusterMetricsResponseProto*>(response),
             done);
      break;
    case 5:
      getApplications(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::GetApplicationsRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::GetApplicationsResponseProto*>(response),
             done);
      break;
    case 6:
      getClusterNodes(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::GetClusterNodesRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::GetClusterNodesResponseProto*>(response),
             done);
      break;
    case 7:
      getQueueInfo(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::GetQueueInfoRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::GetQueueInfoResponseProto*>(response),
             done);
      break;
    case 8:
      getQueueUserAcls(controller,
             ::google::protobuf::down_cast<const ::hadoop::yarn::GetQueueUserAclsInfoRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::yarn::GetQueueUserAclsInfoResponseProto*>(response),
             done);
      break;
    case 9:
      getDelegationToken(controller,
             ::google::protobuf::down_cast<const ::hadoop::common::GetDelegationTokenRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::common::GetDelegationTokenResponseProto*>(response),
             done);
      break;
    case 10:
      renewDelegationToken(controller,
             ::google::protobuf::down_cast<const ::hadoop::common::RenewDelegationTokenRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::common::RenewDelegationTokenResponseProto*>(response),
             done);
      break;
    case 11:
      cancelDelegationToken(controller,
             ::google::protobuf::down_cast<const ::hadoop::common::CancelDelegationTokenRequestProto*>(request),
             ::google::protobuf::down_cast< ::hadoop::common::CancelDelegationTokenResponseProto*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ApplicationClientProtocolService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hadoop::yarn::GetNewApplicationRequestProto::default_instance();
    case 1:
      return ::hadoop::yarn::GetApplicationReportRequestProto::default_instance();
    case 2:
      return ::hadoop::yarn::SubmitApplicationRequestProto::default_instance();
    case 3:
      return ::hadoop::yarn::KillApplicationRequestProto::default_instance();
    case 4:
      return ::hadoop::yarn::GetClusterMetricsRequestProto::default_instance();
    case 5:
      return ::hadoop::yarn::GetApplicationsRequestProto::default_instance();
    case 6:
      return ::hadoop::yarn::GetClusterNodesRequestProto::default_instance();
    case 7:
      return ::hadoop::yarn::GetQueueInfoRequestProto::default_instance();
    case 8:
      return ::hadoop::yarn::GetQueueUserAclsInfoRequestProto::default_instance();
    case 9:
      return ::hadoop::common::GetDelegationTokenRequestProto::default_instance();
    case 10:
      return ::hadoop::common::RenewDelegationTokenRequestProto::default_instance();
    case 11:
      return ::hadoop::common::CancelDelegationTokenRequestProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ApplicationClientProtocolService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hadoop::yarn::GetNewApplicationResponseProto::default_instance();
    case 1:
      return ::hadoop::yarn::GetApplicationReportResponseProto::default_instance();
    case 2:
      return ::hadoop::yarn::SubmitApplicationResponseProto::default_instance();
    case 3:
      return ::hadoop::yarn::KillApplicationResponseProto::default_instance();
    case 4:
      return ::hadoop::yarn::GetClusterMetricsResponseProto::default_instance();
    case 5:
      return ::hadoop::yarn::GetApplicationsResponseProto::default_instance();
    case 6:
      return ::hadoop::yarn::GetClusterNodesResponseProto::default_instance();
    case 7:
      return ::hadoop::yarn::GetQueueInfoResponseProto::default_instance();
    case 8:
      return ::hadoop::yarn::GetQueueUserAclsInfoResponseProto::default_instance();
    case 9:
      return ::hadoop::common::GetDelegationTokenResponseProto::default_instance();
    case 10:
      return ::hadoop::common::RenewDelegationTokenResponseProto::default_instance();
    case 11:
      return ::hadoop::common::CancelDelegationTokenResponseProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ApplicationClientProtocolService_Stub::ApplicationClientProtocolService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ApplicationClientProtocolService_Stub::ApplicationClientProtocolService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ApplicationClientProtocolService_Stub::~ApplicationClientProtocolService_Stub() {
  if (owns_channel_) delete channel_;
}

void ApplicationClientProtocolService_Stub::getNewApplication(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::GetNewApplicationRequestProto* request,
                              ::hadoop::yarn::GetNewApplicationResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::getApplicationReport(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::GetApplicationReportRequestProto* request,
                              ::hadoop::yarn::GetApplicationReportResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::submitApplication(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::SubmitApplicationRequestProto* request,
                              ::hadoop::yarn::SubmitApplicationResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::forceKillApplication(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::KillApplicationRequestProto* request,
                              ::hadoop::yarn::KillApplicationResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::getClusterMetrics(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::GetClusterMetricsRequestProto* request,
                              ::hadoop::yarn::GetClusterMetricsResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::getApplications(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::GetApplicationsRequestProto* request,
                              ::hadoop::yarn::GetApplicationsResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::getClusterNodes(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::GetClusterNodesRequestProto* request,
                              ::hadoop::yarn::GetClusterNodesResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::getQueueInfo(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::GetQueueInfoRequestProto* request,
                              ::hadoop::yarn::GetQueueInfoResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::getQueueUserAcls(::google::protobuf::RpcController* controller,
                              const ::hadoop::yarn::GetQueueUserAclsInfoRequestProto* request,
                              ::hadoop::yarn::GetQueueUserAclsInfoResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::getDelegationToken(::google::protobuf::RpcController* controller,
                              const ::hadoop::common::GetDelegationTokenRequestProto* request,
                              ::hadoop::common::GetDelegationTokenResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::renewDelegationToken(::google::protobuf::RpcController* controller,
                              const ::hadoop::common::RenewDelegationTokenRequestProto* request,
                              ::hadoop::common::RenewDelegationTokenResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void ApplicationClientProtocolService_Stub::cancelDelegationToken(::google::protobuf::RpcController* controller,
                              const ::hadoop::common::CancelDelegationTokenRequestProto* request,
                              ::hadoop::common::CancelDelegationTokenResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace yarn
}  // namespace hadoop

// @@protoc_insertion_point(global_scope)
